from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "util/options-ext-clifwrap.h" import *
from "itf/online-feature-itf-clifwrap.h" import *

from kaldi.itf._online_feature_itf import OnlineFeatureInterface
from kaldi.itf._online_feature_itf import OnlineBaseFeature
from kaldi.matrix._matrix import _matrix_wrapper

from "feat/pitch-functions.h":
  namespace `kaldi`:
    class PitchExtractionOptions:
      """PitchExtractionOptions()

      Options for pitch extraction.
      """

      samp_freq: float
      """Sample frequency, must match the waveform (default=16000)"""

      frame_shift_ms: float
      """Frame shift in milliseconds (default=10)"""

      frame_length_ms: float
      """Frame length in milliseconds (default=25)"""

      preemph_coeff: float
      """Coefficient for use in signal preemphasis (default=0.0)"""

      min_f0: float
      """min F0 to search for in Hz (default=50)"""

      max_f0: float
      """max F0 to search for in Hz (default=400)"""

      soft_min_f0: float
      """min F0, applied in a soft way, must not exceed min_f0 (default=10)"""

      penalty_factor: float
      """Cost factor for F0 change (default=0.1)"""

      lowpass_cutoff: float
      """Cutoff frequency for low pass filter in Hz (default=1000)"""

      resample_freq: float
      """Frequency that we downsample the signal to > 2*lowpass_cutoff (default=4000)"""

      delta_pitch: float
      """Smallest relative change in pitch that the algorithm measures (deafult=0.005)"""

      nccf_ballast: float
      """Increasing this factor reduces NCCF fir quiet frames (default=7000)"""

      lowpass_filter_width: int
      """Width of low pass filter, larger gives sharper filter (default=1)"""

      upsample_filter_width: int
      """Width of filter used in upsampling NCCF (default=5)"""

      max_frames_latency: int
      """Max number of frames of latency allowed (default=0)"""

      frames_per_chunk: int
      """Used for compatibility with online decoding (default=0)"""

      simulate_first_pass_online: bool
      """Output features that correspond to what an online decoder would see (default=False)"""

      recompute_frame: int
      """Used for compatibility with online decoding (default=500)"""

      nccf_ballast_online: bool
      """Useful for debug. Affects how NCCF ballast is computed (default=False)"""

      snip_edges: bool
      """Whether to omit features for incomplete frames near edges (default=True)"""

      def `Register` as register(self, opts: OptionsItf):
        """Registers options with an object implementing the options interface.

        Args:
          opts (OptionsItf): An object implementing the options interface.
            Typically a command-line option parser.
        """

      nccf_window_size: int = property(`NccfWindowSize`)
      """NCCF window size"""

      nccf_window_shift: int = property(`NccfWindowShift`)
      """NCCF window shift"""

    class ProcessPitchOptions:
      """ProcessPitchOptions()

      Options for pitch postprocessing.
      """

      pitch_scale: float
      """Scaling factor for the final normalized log-pitch value (default=2.0)"""

      pov_scale: float
      """Scaling factor for final POV (probability of voicing) feature (default=2.0)"""

      pov_offset: float
      """Offset for final POV feature, useful in online decoding (default=0.0)"""

      delta_pitch_scale: float
      """Term to scale the final delta log-pitch feature (default=10.0)"""

      delta_pitch_noise_stddev: float
      """Standard deviation for noise we add to the delta log-pitch (default=0.005)"""

      normalization_left_context: int
      """Left-context (in frames) for moving window normalization (default=275)"""

      normalization_right_context: int
      """Right-context (in frames) for moving window normalization (default=75)"""

      delta_window: int
      """Number of frames on each side of central frame, to use for delta window (default=2)"""

      delay: int
      """Number of frames by which the pitch information is delayed (default=0)"""

      add_pov_feature: bool
      """If true, the warped NCCF is added to output features (default=True)"""

      add_normalized_log_pitch: bool
      """If true, the normalized-log-pitch is added to output features (default=True)"""

      add_delta_pitch: bool
      """If true, time derivative of log-pitch is added to output features (default=True)"""

      add_raw_log_pitch: bool
      """If true, log(pitch) is added to output features (default=False)"""

      def `Register` as register(self, po: ParseOptions):
        """Registers options with a command-line option parser.

        Args:
          po (ParseOptions): Command-line option parser.
        """

    class OnlinePitchFeature(OnlineBaseFeature):
      """Online pitch feature extractor.

      Args:
        opts (PitchExtractionOptions): Options for pitch extraction.
      """
      def __init__(self, opts: PitchExtractionOptions)

      def `Dim` as dim(self) -> int:
        """Returns feature dimension"""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Returns True if this is last frame, otherwise False"""

      def `FrameShiftInSeconds` as frame_shift_in_seconds(self) -> float:
        """Returns frame shift in seconds"""

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready"""

      def `GetFrame` as get_frame(self, frame: int, feat: VectorBase):
        """Returns the features for given frame index"""

      def `AcceptWaveform` as accept_waveform(self, sampling_rate: float, waveform: VectorBase):
        """Accepts input waveform for feature extraction."""

      def `InputFinished` as input_finished(self):
        """Marks input as finished."""

    class OnlineProcessPitch(OnlineFeatureInterface):
      """Online pitch postprocessor.

      Args:
        opts (ProcessPitchOptions): Options for pitch postprocessing.
        src (OnlineFeatureInterface): Source pitch features.
      """
      def __init__(self, opts: ProcessPitchOptions,
                   src: OnlineFeatureInterface)

      def `Dim` as dim(self) -> int:
        """Returns feature dimension"""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Returns True if this is last frame, otherwise False"""

      def `FrameShiftInSeconds` as frame_shift_in_seconds(self) -> float:
        """Returns frame shift in seconds"""

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready"""

      def `GetFrame` as get_frame(self, frame: int, feat: VectorBase):
        """Returns the features for given frame index"""

    def `ComputeKaldiPitch` as compute_kaldi_pitch(opts: PitchExtractionOptions, wave: VectorBase) -> Matrix:
      """Computes pitch features.

      Args:
        opts (PitchExtractionOptions): Options for pitch extraction.
        wave (Vector): Input waveform.

      Returns:
        Matrix: Pitch features.
      """
      return _matrix_wrapper(...)

    def `ProcessPitch` as process_pitch(opts: ProcessPitchOptions, input: MatrixBase) -> Matrix:
      """Postprocesses pitch features.

      Args:
        opts (ProcessPitchOptions): Options for pitch postprocessing.
        input (Matrix): Input pitch features.

      Returns:
        Matrix: Postprocessed pitch features.
      """
      return _matrix_wrapper(...)

    def `ComputeAndProcessKaldiPitch` as compute_and_process_kaldi_pitch(
      pitch_opts: PitchExtractionOptions, process_opts: ProcessPitchOptions,
      wave: VectorBase) -> Matrix:
      """Computes and postprocesses pitch features.

      Args:
        pitch_opts (PitchExtractionOptions): Options for pitch extraction.
        process_opts (ProcessPitchOptions): Options for pitch postprocessing.
        wave (Vector): Input waveform.

      Returns:
        Matrix: Postprocessed pitch features.
      """
      return _matrix_wrapper(...)
