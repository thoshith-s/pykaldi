from "hmm/transition-model-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "sgmm2/am-sgmm2-clifwrap.h" import *

from kaldi.itf._decodable_itf import DecodableInterface

from "sgmm2/decodable-am-sgmm2.h":
  namespace `kaldi`:
    class DecodableAmSgmm2(DecodableInterface):
      def __init__(self, sgmm: AmSgmm2, tm: TransitionModel, feats: Matrix, gselect: list<list<int>>, log_prune: float, spk: Sgmm2PerSpkDerivedVars)

      # FIXME (VM):
      # @add__init__
      # def `DecodableAmSgmm2` as new_with_ownership(self, sgmm: AmSgmm2, tm: TransitionModel, feats: Matrix, gselect: list<list<int>>, spk: Sgmm2PerSpkDerivedVars, log_prune: float)

      def `LogLikelihood` as loglikelihood(self, frame: int, tid: int) -> float

      def `NumFramesReady` as num_frames_ready(self) -> int

      def `NumIndices` as num_indices(self) -> int

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool

    class DecodableAmSgmm2Scaled(DecodableAmSgmm2):
      def __init__(self, sgmm: AmSgmm2, tm: TransitionModel, feats: Matrix, gselect: list<list<int>>, log_prune: float, scale: float, spk: Sgmm2PerSpkDerivedVars)

      # FIXME (VM):
      # @add__init__
      # def `DecodableAmSgmm2Scaled` as new_with_ownership(self, sgmm: AmSgmm2, tm: TransitionModel, feats: Matrix, gselect: list<list<int>>, spk: Sgmm2PerSpkDerivedVars, log_prune: float, scale: float)

      def `LogLikelihood` as loglikelihood(self, frame: int, tid: int) -> float
