from "base/iostream-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *
from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *

from kaldi.fstext._deterministic_fst import StdDeterministicOnDemandFst
from kaldi.util import _value_error_on_false

from "fstext/context-fst.h":
  namespace `fst`:
    def `WriteILabelInfo` as write_ilabel_info(os: ostream, binary: bool,
                                               info: list<list<int>>):
      """Writes ilabel info to output stream."""

    def `ReadILabelInfo` as read_ilabel_info(is: istream, binary: bool)
        -> list<list<int>>:
      """Reads ilabel info from input stream."""

    def `CreateILabelInfoSymbolTable` as create_ilabel_info_symbol_table(
        info: list<list<int>>, phones_symtab: SymbolTable,
        separator: str, disambig_prefix: str) -> SymbolTable:
        """Creates a symbol table from the ilabel info and phones symbol table.

        This is mainly used for debugging.
        """

    # ComposeContext and AddSubsequentialLoop are wrapped in special-ops.clif.

    class `InverseContextFst` as StdInverseContextFst(StdDeterministicOnDemandFst):
      """Inverse of the context FST "C" in "HCLG" over the tropical semiring.

      InverseContextFst represents the inverse of the context FST "C" (the "C"
      in "HCLG") which transduces from symbols representing phone context
      windows (e.g. "a, b, c") to individual phones, e.g. "a".  So
      InverseContextFst transduces from phones to symbols representing phone
      context windows.  The point is that the inverse is deterministic, so the
      DeterministicOnDemandFst interface is applicable, which turns out to be a
      convenient way to implement this.

      This doesn't implement the full Fst interface, it implements the
      DeterministicOnDemandFst interface which is much simpler and which is
      sufficient for what we need to do with this.

      Search for "hbka.pdf" ("Speech Recognition with Weighted Finite State
      Transducers") by M. Mohri, for more context.

      Args:
        subsequential_symbol (int): Integer index of the subsequential symbol.
        phones (List[int]): Integer indices for the phones.
        disambig_syms (List[int]): Integer indices for disambiguation symbols.
        context_width (int): Size of context window.
        central_position (int): Position of central phone in context window,
          from 0..N-1.
      """
      def __init__(self, subsequential_symbol: int, phones: list<int>,
                   disambig_syms: list<int>, context_width: int, central_position: int)

      def `Start` as start(self) -> int:
        """Returns the start state index."""

      def `Final` as final(self, state: int) -> TropicalWeight:
        """Returns the final weight of the given state."""

      def `GetArc` as get_arc(self, s: int, ilabel: int)
        -> (success: bool, oarc: StdArc):
        """Creates an on demand arc and returns it.

        Args:
          s (int): State index.
          ilabel (int): Arc label.

        Returns:
          The created arc.
        """
        return _value_error_on_false(...)

      def `IlabelInfo` as ilabel_info(self) -> list<list<int>>:
        """Returns input label info."""
