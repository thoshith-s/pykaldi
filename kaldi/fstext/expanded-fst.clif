from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *

from kaldi.fstext._fst import StdFst
from kaldi.fstext._fst import LogFst
from kaldi.fstext._fst import LatticeFst
from kaldi.fstext._fst import CompactLatticeFst
from kaldi.fstext._fst import KwsTimeFst
from kaldi.fstext._fst import KwsIndexFst

from "fst/expanded-fst.h":
  namespace `fst`:

    # StdArc

    class `ExpandedFst<StdArc>` as StdExpandedFst(StdFst):

      def `NumStates` as _num_states(self) -> int

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def Copy(self, safe: bool = default) -> StdExpandedFst
      #
      # @classmethod
      # def Read(cls, filename: str) -> StdExpandedFst

    # CountStates, CountArcs methods are wrapped via shims in fst-inplace-ops.h.

    # LogArc

    class `ExpandedFst<LogArc>` as LogExpandedFst(LogFst):

      def `NumStates` as _num_states(self) -> int

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def Copy(self, safe: bool = default) -> LogExpandedFst
      #
      # @classmethod
      # def Read(cls, filename: str) -> LogExpandedFst

    # CountStates, CountArcs methods are wrapped via shims in fst-inplace-ops.h.

    # LatticeArc

    class `ExpandedFst<ArcTpl<LatticeWeightTpl<float>>>` as LatticeExpandedFst(LatticeFst):

      def `NumStates` as _num_states(self) -> int

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def Copy(self, safe: bool = default) -> LatticeExpandedFst
      #
      # @classmethod
      # def Read(cls, filename: str) -> LatticeExpandedFst

    # CountStates, CountArcs methods are wrapped via shims in fst-inplace-ops.h.

    # CompactLatticeArc

    class `ExpandedFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>` as CompactLatticeExpandedFst(CompactLatticeFst):

      def `NumStates` as _num_states(self) -> int

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def Copy(self, safe: bool = default) -> CompactLatticeExpandedFst
      #
      # @classmethod
      # def Read(cls, filename: str) -> CompactLatticeExpandedFst

    # CountStates, CountArcs methods are wrapped via shims in fst-inplace-ops.h.

    # KwsIndexArc

    class `ExpandedFst<ArcTpl<LexicographicWeight<TropicalWeight, LexicographicWeight<TropicalWeight, TropicalWeight>>>>` as KwsIndexExpandedFst(KwsIndexFst):

      def `NumStates` as _num_states(self) -> int

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def Copy(self, safe: bool = default) -> KwsIndexExpandedFst
      #
      # @classmethod
      # def Read(cls, filename: str) -> KwsIndexExpandedFst

    # CountStates, CountArcs methods are wrapped via shims in fst-inplace-ops.h.
