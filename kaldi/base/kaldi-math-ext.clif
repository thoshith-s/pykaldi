from "base/kaldi-math-clifwrap.h" import *

from "base/kaldi-math-ext.h":

  def `FLOAT_KALDI_ISNAN` as isnan(arg: float) -> bool:
    """Determines if the given floating point number is a not-a-number (NaN) value."""

  def `DOUBLE_KALDI_ISNAN` as double_isnan(arg:float) -> bool:
    """Determines if the given floating point number is a not-a-number (NaN) value."""

  def `FLOAT_KALDI_ISINF` as isinf(arg: float) -> bool:
    """Determines if the given floating point number is a positive or negative infinity."""

  def `DOUBLE_KALDI_ISINF` as double_isinf(arg: float) -> bool:
    """Determines if the given floating point number is a positive or negative infinity."""

  def `FLOAT_KALDI_ISFINITE` as isfinite(arg: float) -> bool:
    """Determines if the given floating point number has finite value."""

  def `DOUBLE_KALDI_ISFINITE` as double_isfinite(arg: float) -> bool:
    """Determines if the given floating point number has finite value."""

  def `FLOAT_KALDI_SQR` as sqr(x: float) -> float:
    """Squares the given floating point number."""

  def `DOUBLE_KALDI_SQR` as double_sqr(x: float) -> float:
    """Squares the given floating point number."""

  namespace `kaldi`:

    def `GetkLogZeroFloat` as _log_zero_float() -> float

    def `GetkLogZeroDouble` as _log_zero_double() -> float

    def `FloatExp` as exp(x:float) -> float:
      """Computes e raised to the given power."""

    def `DoubleExp` as double_exp(x:float) -> float:
      """Computes e raised to the given power."""

    def `FloatLog` as log(x:float) -> float:
      """Computes the natural (base e) logarithm."""

    def `DoubleLog` as double_log(x: float) -> float:
      """Computes the natural (base e) logarithm."""

    def `FloatLog1p` as log1p(x: float) -> float:
      """Computes natural logarithm of 1 plus the given number (ln(1+x))"""

    def `DoubleLog1p` as double_log1p(x: float) -> float:
      """Computes natural logarithm of 1 plus the given number (ln(1+x))"""

    def `FloatRandGauss2` as rand_gauss2(state: RandomState = default) -> (a:float, b:float):
      """Returns a pair of gaussian random numbers using Box-Muller transform"""

    def `DoubleRandGauss2` as double_rand_gauss2(state: RandomState = default) -> (a:float, b:float):
      """Returns a pair of gaussian random numbers using Box-Muller transform"""

    def `FloatLogAdd` as log_add(x:float, y:float) -> float:
      """Computes log(exp(x) + exp(y)) without losing precision."""

    def `DoubleLogAdd` as double_log_add(x: float, y: float) -> float:
      """Computes log(exp(x) + exp(y)) without losing precision."""

    def `FloatLogSub` as log_sub(x: float, y: float) -> float:
      """Computes log(exp(x) - exp(y)) without losing precision."""

    def `DoubleLogSub` as double_log_sub(x: float, y: float) -> float:
      """Computes log(exp(x) + exp(y)) without losing precision."""

    def `FloatHypot` as hypot(x: float, y: float) -> float:
      """Computes square root of the sum of the squares of two given numbers."""

    def `DoubleHypot` as double_hypot(x: float, y: float) -> float:
      """Computes square root of the sum of the squares of two given numbers."""
