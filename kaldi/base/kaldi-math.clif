
from "base/kaldi-math.h":
  namespace `kaldi`:

    class RandomState:
      """RandomState()

      Thread-safe random number generator state.
      """

      seed: int
      """Seed for generating random numbers"""

    def `Rand` as rand(state: RandomState = default) -> int:
      """Returns a random integer between 0 and RAND_MAX, inclusive."""

    def `RandInt` as _rand_int(first: int, last: int, state: RandomState = default) -> int

    def `WithProb` as _with_prob(prob:float, state: RandomState = default) -> bool

    def `RandUniform` as rand_uniform(state: RandomState = default) -> float:
      """Returns a random number from uniform distribution (strictly between 0 and 1)."""

    def `RandGauss` as rand_gauss(state: RandomState = default) -> float:
      """Returns a random number from standard normal distribution."""

    def `RandPoisson` as rand_poisson(lambda: float, state: RandomState = default) -> int:
      """Returns a random number from poisson distribution."""

    # NOTE (VM):
    # This were included in kaldi-math-ext.h
    # def RandGauss2(a:float, b:float, state: RandomState = default)
    # def LogAdd(x:float, y:float) -> float
    # def Hypot(x:float, y:float) -> float

    def `RandPrune` as rand_prune(post:float, prune_tresh:float, state: RandomState = default) -> float:
      """Prunes by preserving expectations.

      This is typically used to prune posteriors.
      """

    def `ApproxEqual` as approx_equal(a:float, b:float, relative_tolerance:float = default) -> bool:
      """Returns abs(a - b) <= relative_tolerance * (abs(a) + abs(b))"""

    def `RoundUpToNearestPowerOfTwo` as _round_up_to_nearest_power_of_two(n:int) -> int

    def `DivideRoundingDown` as divide_rounding_down(a:int, b:int) -> int:
      """Returns a / b, rounding towards negative infinity in all cases."""

    def `Gcd` as gcd(m:int, n:int) -> int:
      """Returns the greatest common divisor of two integers."""

    def `Lcm` as _lcm(m:int, n:int) -> int

    def `Factorize` as _factorize(m:int) -> list<int>
