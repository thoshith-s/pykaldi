from "base/iostream-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *

from "lat/word-align-lattice.h":
  namespace `kaldi`:
    class WordBoundaryInfoNewOpts:
      """Options for word alignment using word boundary phones."""
      silence_label: int
      """Label for silence arcs."""
      partial_word_label: int
      """Label for partial word arcs at the end of "forced-out" utterances."""
      reorder: bool
      """Whether lattice was created from a graph with reorder option set."""

      def `Register` as register(self, opts: OptionsItf):
        """Registers options with an object implementing the options interface.

        Args:
          opts (OptionsItf): An object implementing the options interface.
            Typically a command-line option parser.
        """

    class WordBoundaryInfo:
      """WordBoundaryInfo(opts)

      Word boundary information.

      Args:
        opts (WordBoundaryInfoNewOpts): Decoder options.
      """
      def __init__(self, opts: WordBoundaryInfoNewOpts)

      @add__init__
      def `WordBoundaryInfo` as from_file(
        self, opts: WordBoundaryInfoNewOpts, word_boundary_file: str):
        """Creates a new `WordBoundaryInfo` object from file."""

      def `Init` as init(self, is: istream):
        """Initializes with information read from an input stream."""

      enum PhoneType with:
        `kNoPhone` as NO_PHONE
        `kWordBeginPhone` as WORD_BEGIN_PHONE
        `kWordEndPhone` as WORD_END_PHONE
        `kWordBeginAndEndPhone` as WORD_BEGIN_AND_END_PHONE
        `kWordInternalPhone` as WORD_INTERNAL_PHONE
        `kNonWordPhone` as NON_WORD_PHONE

      def `TypeOfPhone` as type_of_phone(self, p: int) -> PhoneType:
        """Looks up the type of the given phone id.

        Args:
          p (int): The input phone id.

        Returns:
          PhoneType: The type of input phone id.
        """

      phone_to_type: list<PhoneType>
      """Mapping from phone ids to phone types."""
      silence_label: int
      """Label for silence arcs."""
      partial_word_label: int
      """Label for partial word arcs at the end of "forced-out" utterances."""
      reorder: bool
      """Whether lattice was created from a graph with reorder option set."""


    def `WordAlignLattice` as _word_align_lattice(
      lat: CompactLatticeVectorFst, tmodel: TransitionModel,
      info: WordBoundaryInfo, max_states: int)
      -> (success: bool, lat_out: CompactLatticeVectorFst)


    def `TestWordAlignedLattice` as test_word_aligned_lattice(
      lat: CompactLatticeVectorFst, tmodel: TransitionModel,
      info: WordBoundaryInfo, aligned_lat: CompactLatticeVectorFst):
      """Verifies the output of `word_align_lattice`.

      Args:
        lat (CompactLatticeVectorFst): The input lattice.
        tmodel (TransitionModel): The transition model.
        info (WordBoundaryInfo): The word boundary information.
        aligned_lat (CompactLatticeVectorFst): The word-aligned lattice.

      Raises:
        RuntimeError: If verification fails.
      """
