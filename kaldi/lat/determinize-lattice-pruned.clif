from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/expanded-fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *

from kaldi.util import _value_error_on_false

from "lat/determinize-lattice-pruned.h":
  namespace `fst`:
    class DeterminizeLatticePrunedOptions:
      """Options for pruning and word determinizing a lattice."""

      delta: float
      """A small offset used to measure equality of weights."""
      max_mem: int
      """Maximum memory threshold for the determinization operation.

      If > 0, determinization will fail and return false when the algorithm's
      (approximate) memory consumption crosses this threshold.
      """
      max_loop: int
      """Maximum loop threshold for the determinization operation.

      If >0, can be used to detect non-determinizable input (a case that
      wouldn't be caught by max_mem).
      """
      max_states: int
      """Maximum number of states allowed in output FST."""
      max_arcs: int
      """Maximum number of arcs allowed in output FST."""
      retry_cutoff: float
      """Cutoff value used when retrying a failed determinization operation.

      Controls pruning un-determinized lattice and retrying determinization:
      if effective-beam <  retry-cutoff * beam, we prune the raw lattice and
      retry. Avoids ever getting empty output for long segments.
      """

      def `Register` as register(self, opts: OptionsItf):
        """Registers options with an object implementing the options interface.

        Args:
          opts (OptionsItf): An object implementing the options interface.
            Typically a command-line option parser.
        """

    class DeterminizeLatticePhonePrunedOptions:
      """Options for pruning and phone+word determinizing a lattice."""

      delta: float
      """A small offset used to measure equality of weights."""
      max_mem: int
      """Maximum memory threshold for the determinization operation.

      If > 0, determinization will fail and return false when the algorithm's
      (approximate) memory consumption crosses this threshold.
      """
      phone_determinize: bool
      """Whether to do a first pass determinization on both phones and words."""
      word_determinize: bool
      """Whether to do a second pass determinization on words only."""
      minimize: bool
      """Whether to push and minimize the output after determinization."""

      def `Register` as register(self, opts: OptionsItf):
        """Registers options with an object implementing the options interface.

        Args:
          opts (OptionsItf): An object implementing the options interface.
            Typically a command-line option parser.
        """

    def `DeterminizeLatticePruned` as _determinize_lattice_pruned(
      ifst: LatticeExpandedFst, prune: float, ofst: LatticeMutableFst,
      opts: DeterminizeLatticePrunedOptions = default) -> bool

    def `DeterminizeLatticePruned` as _determinize_lattice_pruned_to_compact(
      ifst: LatticeExpandedFst, prune: float, ofst: CompactLatticeMutableFst,
      opts: DeterminizeLatticePrunedOptions = default) -> bool

    def `DeterminizeLatticeInsertPhones` as _determinize_lattice_insert_phones(
      trans_model: TransitionModel, fst: LatticeMutableFst) -> int:
      """Inserts phones at phone boundaries in a lattice.

      This function takes in a lattice and inserts phones at phone boundaries.
      It uses the transition model to work out the transition_id to phone map.
      The return value is the starting index of the phone labels. Typically we
      pick (`maximum_output_label_index + 1`) as this value. The inserted
      phones are then mapped to (`return_value + original_phone_label`) in the
      new lattice. The return value is used by
      `determinize_lattice_delete_phones` to work out the phones.

      Args:
        trans_model (TransitionModel): The transition model.
        fst (LatticeMutableFst): The input lattice.

      Returns:
        The starting index of the phone labels.

      See Also:
        meth:`_determinize_lattice_delete_phones`
      """

    def `DeterminizeLatticeDeletePhones` as _determinize_lattice_delete_phones(
      first_phone_label: int, fst: LatticeMutableFst):
      """Deletes phones larger than `first_phone_label` in a lattice.

      This function takes in lattices and deletes "phones" from them. The
      "phones" here are actually any label that is larger than
      `first_phone_label` because when we insert phones into the lattice, we
      map the original phone label to (`first_phone_label +
      original_phone_label`). It is supposed to be used together with
      `determinize_lattice_insert_phones`.

      Args:
        first_phone_label (int): The starting index of the phone labels.
        fst (LatticeMutableFst): The input lattice.

      See Also:
        meth:`_determinize_lattice_insert_phones`
      """

    def `DeterminizeLatticePhonePruned` as _determinize_lattice_phone_pruned(
      trans_model: TransitionModel, ifst: LatticeExpandedFst, prune: float,
      ofst: CompactLatticeMutableFst, opts: DeterminizeLatticePhonePrunedOptions = default) -> bool

    def `DeterminizeLatticePhonePruned` as _determinize_lattice_phone_pruned_destructive(
      trans_model: TransitionModel, ifst: LatticeMutableFst, prune: float,
      ofst: CompactLatticeMutableFst, opts: DeterminizeLatticePhonePrunedOptions = default) -> bool

    def `DeterminizeLatticePhonePrunedWrapper` as _determinize_lattice_phone_pruned_wrapper(
      trans_model: TransitionModel, ifst: LatticeMutableFst, prune: float,
      ofst: CompactLatticeMutableFst, opts: DeterminizeLatticePhonePrunedOptions = default) -> bool
