from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *

from "matrix/compressed-matrix.h":
  namespace `kaldi`:
    enum CompressionMethod with:
#     kAutomaticMethod = 1 This is the default when you don't specify the
#                         compression method.  It is a shorthand for using
#                         kSpeechFeature if the num-rows is more than 8, and
#                         kTwoByteAuto otherwise.
#     kSpeechFeature = 2  This is the most complicated of the compression methods,
#                         and was designed for speech features which have a roughly
#                         Gaussian distribution with different ranges for each
#                         dimension.  Each element is stored in one byte, but there
#                         is an 8-byte header per column; the spacing of the
#                         integer values is not uniform but is in 3 ranges.
#     kTwoByteAuto = 3    Each element is stored in two bytes as a uint16, with
#                         the representable range of values chosen automatically
#                         with the minimum and maximum elements of the matrix as
#                         its edges.
#     kTwoByteSignedInteger = 4
#                         Each element is stored in two bytes as a uint16, with
#                         the representable range of value chosen to coincide with
#                         what you'd get if you stored signed integers, i.e.
#                         [-32768.0, 32767.0].  Suitable for waveform data that
#                         was previously stored as 16-bit PCM.
#     kOneByteAuto = 5    Each element is stored in one byte as a uint8, with the
#                         representable range of values chosen automatically with
#                         the minimum and maximum elements of the matrix as its
#                         edges.
#     kOneByteUnsignedInteger = 6 Each element is stored in
#                         one byte as a uint8, with the representable range of
#                         values equal to [0.0, 255.0].
#     kOneByteZeroOne = 7 Each element is stored in
#                         one byte as a uint8, with the representable range of
#                         values equal to [0.0, 1.0].  Suitable for image data
#                         that has previously been compressed as int8.
      `kAutomaticMethod` as AUTO
      `kSpeechFeature` as SPEECH_FEATURE
      `kTwoByteAuto` as TWO_BYTE_AUTO
      `kTwoByteSignedInteger` as TWO_BYTE_SIGNED_INTEGER
      `kOneByteAuto` as ONE_BYTE_AUTO
      `kOneByteUnsignedInteger` as ONE_BYTE_UNSIGNED_INTEGER
      `kOneByteZeroOne` as TWO_BYTE_ZERO_ONE


    class CompressedMatrix:
      """A lossily compressed Matrix class"""
      @add__init__
      def `CompressedMatrix` as new(self, mat: MatrixBase,
                                    method: CompressionMethod = default):
        """Copy the data from a MatrixBase and compress it

        Args:
            mat(MatrixBase): A matrix
            method(CompressionMethod): The way we will compress the matrix.
                                       Default is kAutomaticMethod
        """

      @add__init__
      def `CompressedMatrix` as new_with_range(self, mat: CompressedMatrix,
                                             row_offset: int, num_rows: int,
                                             col_offset: int, num_cols:int,
                                             allow_padding: bool = default):
        """
          Create a compressed matrix from another compressed matrix. If allow padding is true
          you can create an "expanded" matrix by either having a negative row_offset or by
          setting num_rows>mat.num_rows.

          Args:
              mat(CompressedMatrix): A compressed matrix
              row_offset(int): From which row of mat to start copying. Indexing starts at 0
              num_rows(int): How many rows of mat to copy
              col_offset(int): From which column of mat to start copying. Indexing starts at 0
              num_cols(int): How many columns of mat to copy
              allow_padding(bool): Allows you to violate ``row'' dimentionality conditions

           Raises:
              Error in case dimensionality violations (taking also allow_padding into consideration).
        """

      @add__init__
      def `CompressedMatrix` as new_with_other(self, mat: CompressedMatrix):
        """
           Set this matrix (self) as the other (mat)

           Args:
               mat(CompressedMatrix): A compressed Matrix
        """

      def `CopyFromMat` as copy_from_mat(self, mat: MatrixBase,
                      method: CompressionMethod = default):
        """Copy data from another matrix to self.

        Args:
            mat(MatrixBase): The matrix from which we will copy the data
            method(CompresssionMethod): Which compression method to use
        """

      def `CopyToMat` as copy_to_mat(self, mat: MatrixBase,
                    method: MatrixTransposeType = default):
        """Perfomrs mat=self if MatrixTransposeType is kNoTrans,
           or mat^T=self if MatrixTransposeType is kTrans.

        Args:
            mat(MatrixBase): The destination matrix
            method(MatrixTransposeType): Determines transposition of mat.
                                         Default value is kNoTrans

        Raises:
            Error in case of dimension mismatch
        """

      num_rows: int = property(`NumRows`)
      """Number of rows (zero for empty matrix)."""

      num_cols: int = property(`NumCols`)
      """Number of columns (zero for empty matrix)."""

      def `CopyRowToVec` as copy_row_to_vec(self, row: int, v: VectorBase):
        """Uncompresess and copies row of the matrix into vector v.

        Args:
            row(int): Indexes the row. Indexing starts from 0
            v(VectorBase): The vector that will store the row.

        Raises:
            Error in case of dimesnionality mismatch
        """

      def `CopyColToVec` as copy_col_to_vec(self, col: int, v: VectorBase):
        """Uncompresess and copies column of the matrix into vector v.

        Args:
            col(int): Indexes the row. Indexing starts from 0
            v(VectorBase): The vector that will store the row.

        Raises:
            Error in case of dimesnionality mismatch
        """

      def `CopyToMat` as copy_to_mat_offset(self, row_offset: int,
                                         col_offset: int, dest: MatrixBase):
        """Uncompresses and copies submatrix of compressed matrix
           into matrix dest. Submatrix starts at row row_offset and column
           column_offset and its size is defined by size of provided matrix
           dest.

        Args:
            row_offset(int): The row offset. Indexing starts from 0
            col_offset(int): The col offset. Indexing starts from 0
            dest(MatrixBase): The matrix that will store the submatrix of self

        Raises:
            Error in case of dimesnionality violations.
        """

      def `Swap` as swap(self, other: CompressedMatrix):
        """Swap elements with another compressed matrix. Shallow swap.

        Args:
            other(CompressedMatrix): A compressed matrix

        Raises:
            Error in case od dimension mismatch.
        """

      def `Clear` as clear(self):
        """Deletes the data of the matrix"""

      def `Scale` as scale(self, alpha: float):
        """scales all elements of matrix by alpha."""
