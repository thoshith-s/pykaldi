from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/tp-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *


from "matrix/kaldi-matrix-ext.h":
  namespace `kaldi`:

    # Shims for single precision matrices

    def `CopyFromMat` as _copy_from_double_mat(self: MatrixBase, M: DoubleMatrixBase, trans: MatrixTransposeType = default)

    def `CopyFromCompressed` as _copy_from_cmat(self: MatrixBase, M: CompressedMatrix)

    def `CopyFromSp` as _copy_from_sp(self: MatrixBase, M: SpMatrix)

    def `CopyFromSp` as _copy_from_double_sp(self: MatrixBase, M: DoubleSpMatrix)

    def `CopyFromTp` as _copy_from_tp(self: MatrixBase, M: TpMatrix, trans: MatrixTransposeType = default)

    def `CopyFromTp` as _copy_from_double_tp(self: MatrixBase, M: DoubleTpMatrix, trans: MatrixTransposeType = default)

    def `AddSp` as _add_sp(self: MatrixBase, alpha: `float` as float, S: SpMatrix)

    def `AddSp` as _add_double_sp(self: MatrixBase, alpha: `float` as float, S: DoubleSpMatrix)

    def `AddSpMat` as _add_sp_mat(self: MatrixBase, alpha: `float` as float, A: SpMatrix,
                                  B: MatrixBase, transB: MatrixTransposeType,
                                  beta: `float` as float)

    def `AddTpMat` as _add_tp_mat(self: MatrixBase, alpha: `float` as float, A: TpMatrix,
                                 transA: MatrixTransposeType, B: MatrixBase,
                                 transB: MatrixTransposeType, beta: `float` as float)

    def `AddMatSp` as _add_mat_sp(self: MatrixBase, alpha: `float` as float,
                                  A: MatrixBase, transA: MatrixTransposeType,
                                  B: SpMatrix, beta: `float` as float)

    def `AddMatTp` as _add_mat_tp(self: MatrixBase, alpha: `float` as float,
                                  A: MatrixBase, transA: MatrixTransposeType,
                                  B: TpMatrix, transB: MatrixTransposeType,
                                  beta: `float` as float)

    def `AddTpTp` as _add_tp_tp(self: MatrixBase, alpha: `float` as float, A: TpMatrix,
                                transA: MatrixTransposeType, B: TpMatrix,
                                transB: MatrixTransposeType, beta: `float` as float)

    def `AddSpSp` as _add_sp_sp(self: MatrixBase, alpha: `float` as float, A: SpMatrix,
                               B: SpMatrix, beta: `float` as float)

    def `Invert` as _invert(self: MatrixBase) -> (log_det: `float` as float, det_sign: `float` as float):
      """Inverts the matrix.

      Returns:
        log_det(float): The log determinant.
        det_sign(float): The sign of the determinant, 1 or -1.

      Raises:
        RuntimeError: If matrix is not square.
      """

    def `InvertDouble` as _invert_in_double(self: MatrixBase) -> (log_det: `float` as float, det_sign: `float` as float):
      """Inverts the matrix in double precision.

      Returns:
        log_det(float): The log determinant.
        det_sign(float): The sign of the determinant, 1 or -1.

      Raises:
        RuntimeError: If matrix is not square.
      """

    def `CopyCols` as _copy_cols(self: MatrixBase, src: MatrixBase, indices: list<int>):
      """Copies columns from another matrix.

      Copies column r from column indices[r] of src. As a special case, if
      indexes[i] == -1, sets column i to zero. All elements of indices must
      be in [-1, src.num_cols-1], and src.num_rows must equal self.num_rows.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    def `CopyRows` as _copy_rows(self: MatrixBase, src: MatrixBase, indices: list<int>):
      """Copies rows from another matrix.

      Copies row r from row indices[r] of src. As a special case, if
      indexes[i] == -1, sets row i to zero. All elements of indices must
      be in [-1, src.num_rows-1], and src.num_cols must equal self.num_cols.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    def `AddCols` as _add_cols(self: MatrixBase, src: MatrixBase, indices: list<int>):
      """Adds columns from another matrix.

      Adds column indices[r] of src to column r. As a special case, if
      indexes[i] == -1, skips column i. All elements of indices must
      be in [-1, src.num_cols-1], and src.num_rows must equal self.num_rows.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    def `AddRows` as _add_rows(self: MatrixBase, alpha: `float` as float, src: MatrixBase, indexes: list<int>):
      """Adds rows from another matrix.

      Scales row indices[r] of src with alpha and adds it to row r. As a
      special case, if indexes[i] == -1, skips row i. All elements of indices
      must be in [-1, src.num_rows-1], and src.num_cols must equal
      self.num_cols.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    # Shims for double precision matrices

    def `CopyFromMat` as _copy_from_single_mat_double(self: DoubleMatrixBase, M: MatrixBase, trans: MatrixTransposeType = default)

    def `CopyFromCompressed` as _copy_from_cmat_double(self: DoubleMatrixBase, M: CompressedMatrix)

    def `CopyFromSp` as _copy_from_sp_double(self: DoubleMatrixBase, M: DoubleSpMatrix)

    def `CopyFromSp` as _copy_from_single_sp_double(self: DoubleMatrixBase, M: SpMatrix)

    def `CopyFromTp` as _copy_from_tp_double(self: DoubleMatrixBase, M: DoubleTpMatrix, trans: MatrixTransposeType = default)

    def `CopyFromTp` as _copy_from_single_tp_double(self: DoubleMatrixBase, M: TpMatrix, trans: MatrixTransposeType = default)

    def `AddSp` as _add_sp_double(self: DoubleMatrixBase, alpha: float, S: DoubleSpMatrix)

    def `AddSp` as _add_single_sp_double(self: DoubleMatrixBase, alpha: float, S: SpMatrix)

    def `AddSpMat` as _add_sp_mat_double(self: DoubleMatrixBase, alpha: float, A: DoubleSpMatrix,
                                         B: DoubleMatrixBase, transB: MatrixTransposeType,
                                         beta: float)

    def `AddTpMat` as _add_tp_mat_double(self: DoubleMatrixBase, alpha: float, A: DoubleTpMatrix,
                                         transA: MatrixTransposeType, B: DoubleMatrixBase,
                                         transB: MatrixTransposeType, beta: float)

    def `AddMatSp` as _add_mat_sp_double(self: DoubleMatrixBase, alpha: float,
                                        A: DoubleMatrixBase, transA: MatrixTransposeType,
                                        B: DoubleSpMatrix, beta: float)

    def `AddMatTp` as _add_mat_tp_double(self: DoubleMatrixBase, alpha: float,
                                        A: DoubleMatrixBase, transA: MatrixTransposeType,
                                        B: DoubleTpMatrix, transB: MatrixTransposeType,
                                        beta: float)

    def `AddTpTp` as _add_tp_tp_double(self: DoubleMatrixBase, alpha: float, A: DoubleTpMatrix,
                                       transA: MatrixTransposeType, B: DoubleTpMatrix,
                                       transB: MatrixTransposeType, beta: float)

    def `AddSpSp` as _add_sp_sp_double(self: DoubleMatrixBase, alpha: float, A: DoubleSpMatrix,
                                       B: DoubleSpMatrix, beta: float)

    def `Invert` as _invert_double(self: DoubleMatrixBase) -> (log_det: float, det_sign: float):
      """Inverts the matrix.

      Returns:
        log_det(float): The log determinant.
        det_sign(float): The sign of the determinant, 1 or -1.

      Raises:
        RuntimeError: If matrix is not square.
      """

    def `CopyCols` as _copy_cols_double(self: DoubleMatrixBase, src: DoubleMatrixBase, indices: list<int>):
      """Copies columns from another matrix.

      Copies column r from column indices[r] of src. As a special case, if
      indexes[i] == -1, sets column i to zero. All elements of indices must
      be in [-1, src.num_cols-1], and src.num_rows must equal self.num_rows.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    def `CopyRows` as _copy_rows_double(self: DoubleMatrixBase, src: DoubleMatrixBase, indices: list<int>):
      """Copies rows from another matrix.

      Copies row r from row indices[r] of src. As a special case, if
      indexes[i] == -1, sets row i to zero. All elements of indices must
      be in [-1, src.num_rows-1], and src.num_cols must equal self.num_cols.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    def `AddCols` as _add_cols_double(self: DoubleMatrixBase, src: DoubleMatrixBase, indices: list<int>):
      """Adds columns from another matrix.

      Adds column indices[r] of src to column r. As a special case, if
      indexes[i] == -1, skips column i. All elements of indices must
      be in [-1, src.num_cols-1], and src.num_rows must equal self.num_rows.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """

    def `AddRows` as _add_rows_double(self: DoubleMatrixBase, alpha: float, src: DoubleMatrixBase, indexes: list<int>):
      """Adds rows from another matrix.

      Scales row indices[r] of src with alpha and adds it to row r. As a
      special case, if indexes[i] == -1, skips row i. All elements of indices
      must be in [-1, src.num_rows-1], and src.num_cols must equal
      self.num_cols.

      Args:
        src (Matrix): The input matrix.
        indices (List[int]): The list of indices.
      """
