from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *

from kaldi.matrix._matrix import _matrix_wrapper

from "matrix/sparse-matrix.h":
  namespace `kaldi`:

    # Single precision

    class `SparseVector<float>` as SparseVector:
      """Defines a class for sparse vectors."""

      def `Dim` as __len__(self) -> int:
        """Returns the dimension of the vector."""

      dim: int = property(`Dim`)
      """Dimension (zero for empty vector)."""

      def `Sum` as sum(self) -> float:
        """Returns the summation of the elements."""

      def `CopyElementsToVec` as copy_elements_to_vec(self, vec: VectorBase):
        """Copy the elements of self to vec.

        Args:
            vec(Vector): A vector

        Raises:
            Error in case of dimension mismatch
        """

      def `AddToVec` as add_to_vec(self, alpha: float, vec: VectorBase):
        """Performs vec=vec+alpha*self

        Args:
            alpha(float): A scaling constant
            vec(Vector): A vector
        """

      def `CopyFromSvec` as copy_from_svec_(self, other: SparseVector) -> self:
        """Copy elements of other to self

        Args:
            other(SparseVector): A sparse vector whose elements we will copy

        Raises:
            Error in case of dimension mismatch
        """

      @add__init__
      def `SparseVector` as from_other(self, other: SparseVector):
        """Initialization by copying the elements of other."""

      @add__init__
      def `SparseVector` as from_vector(self, vec: VectorBase):
        """Initialization by copying the elements of vector."""

      def `Swap` as swap_(self, other: SparseVector) -> self:
        """Swaps the contents of self and other. Shallow swap.

        Args:
            other(Vector): The vector whose elements we want to swap with self.
        """

      def `Max` as max(self) -> (value: float, index: int):
        """Returns a tuple holding the maximum value(float) of the vector and its index(int)."""

      def `NumElements` as num_elements(self) -> int:
        """Returns the number of nonzero elements."""

      def `GetElement` as get_elements(self, i: int) -> tuple<int, float>:
        """Get an indexed element.

        Returns:
            A tuple holding the index and a float
        """

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self:
        """Sets elements to zero with probability zero_prob, else normally distributed."""

      @add__init__
      def `SparseVector` as from_dim(self, dim: int):
        """Initialization by defining the size of the vector.

        Args:
            dim(int): The size of the vector
        """

      @add__init__
      def `SparseVector` as from_pairs(self, dim: int,
                                           pairs: list<tuple<int, float>>):
        """Initialization using a list of tuples(pairs).

        Args:
            dim(int): The size of the vector
            pairs(list<tuple<int,float>>): A list of tuples. Each tuple holds an index
                                           in the vector and its corresponding value
        """

      def `Resize` as resize_(self, dim: int, resize_type: MatrixResizeType = default) -> self:
        """Set vector size to length (length can be zero).
          The default resize type is kSetZero, in which case the new data will
          be zero. If the resize type is kUndefined, the new data will be undefined.
          Finally if the resize type is kCopyData, the new data will be the same as
          the old data in any shared positions, and zero elsewhere.

       Args:
           dim(int): The new size of the vector
           resize_type(MatrixResizeType): Determines the initial values of the vector.
       """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes to C++ stream.

        Args:
            os(ostream): The output straem.
            binary(bool): If the stream is binary.
        """

      def `Read` as read_(self, is: istream, binary: bool) -> self:
        """Reads from C++ stream.

        Args:
            is(istream): The input straem.
            binary(bool): If the stream is binary.
        """

      def `Scale` as scale_(self, alpha: float) -> self:
        """Scale the elements of the vector by alpha"""

    def `VecSvec` as _vec_svec(vec: VectorBase, svec: SparseVector) -> float:
        """Returns the inner product of vec and svec."""

    class `SparseMatrix<float>` as SparseMatrix:
      """This class defines a Sparse Matrix."""

      def `NumRows` as __len__(self) -> int:
        """Returns the number of rows of the matrix."""

      num_rows: int = property(`NumRows`)
      """Number of rows (zero for empty matrix)."""

      num_cols: int = property(`NumCols`)
      """Number of columns (zero for empty matrix)."""

      def `NumElements` as num_elements(self) -> int:
        """Returns the number of nonzero elements."""

      def `Sum` as sum(self) -> float:
        """Returns the sum of the elememts."""

      def `FrobeniusNorm` as frobenius_norm(self) -> float:
        """Computes and returns the Frobenius norm."""

      def `CopyToMat` as copy_to_mat(self, other: MatrixBase, t: MatrixTransposeType = default)

      def `CopyElementsToVec` as copy_elements_to_vec(self, other: VectorBase):
        """Copies the nonzero elements of the matrix to the vector other.

        Args:
            other(Vector): A vector to store the nonzero elements of self

        Raises:
            Error if the size of other is different than the number of nonzero
            elements of self
        """

      def `CopyFromSmat` as copy_from_smat_(self, other: SparseMatrix) -> self:
        """Copy data from another sparse matrix. Will resize if necessary.

        Args:
            other(SparseMatrix): The matrix to copy from.
        """

      def `AddToMat` as add_to_mat(self, alpha: float, other: MatrixBase,
                                   t: MatrixTransposeType = default):
        """Performs other = other+alpha*self if t==kNoTrans
        or other^T = other^T+alpha*self if t==kTrans

        Args:
            alpha(float): A constant
            other(Matrix): A matrix
            t(MatrixTransposeType): transpose or not

        Raises:
            Error in case of dimension mismatch
        """

      @add__init__
      def `SparseMatrix` as from_other(self, other: SparseMatrix):
        """Initialization by copying the elements of another sparse matrix.

        Args:
            other(SparseMatrix): A sparse matrix
        """

      @add__init__
      def `SparseMatrix` as from_matrix(self, mat: MatrixBase):
        """Initialization by copying the elements of a matrix.

        Args:
            mat(Matrix): A matrix
        """

      def `Swap` as swap_(self, other: SparseMatrix) ->  self:
        """Swaps the contents of self and other. Shallow swap."""

      @add__init__
      def `SparseMatrix` as from_pairs(
          self, dim: int, pairs: list<list<tuple<int, float>>>):
        """Initialization by a list of list of tuples. The tuples hold
           and index for the matrix and the corresponding value.

        Args:
            dim(int): Determines the number of columns
            pairs(list<list<tuple<int,float>>>): Contains the element of the matrix.
                                                 The length of the ``outer'' list determines
                                                 the number of rows
       """

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self:
        """Sets up to a pseudo-randomly initialized matrix,
           with each element zero with probability zero_prob
           and else normally distributed.
        """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes to C++ stream.

        Args:
            os(ostream): The output straem.
            binary(bool): If the stream is binary.
        """

      def `Read` as read_(self, is: istream, binary: bool) -> self:
        """Reads from C++ stream.

        Args:
            is(istream): The input straem.
            binary(bool): If the stream is binary.
        """

      def `Row` as row(self, r: int) -> SparseVector:
        """Returns the row indexed by r as a sparse vector"""

      def `SetRow` as set_row_(self, r: int, vec: SparseVector) -> self:
        """Sets row r to "vec"; makes sure it has the correct dimension."""

      # def AppendSparseMatrixRows(self, inputs: list<SparseMatrix>)

      @add__init__
      def `SparseMatrix` as from_dims(self, num_rows: int, num_cols: int):
        """Initialization by defining the dimensions.

        Args:
            num_rows(int): The number of rows
            num_cols(int): The number of columns
        """

      def `Resize` as resize_(self, rows: int, cols: int,
                 resize_type: MatrixResizeType = default) -> self:
        """Resizes a matrix. If the resize_type is kSetZero,
           the new data will be zero. If the resize type is kUndefined,
           the new data will be undefined. Finally if the resize type is kCopyData,
           the new data will be the same as the old data in any shared positions,
           and zero elsewhere. stride_type defines how data will be read from memory,
           we advise to let it in its default value.

        Args:
            rows(int): The new number of rows
            cols(int): The new number of columns
            resize_type(MatrixResizeType): Determines the initial values of the vector.
        """

      def `Scale` as scale_(self, alpha: float) -> self:
        """Scale the elements of the matrix by alpha."""

    def `TraceMatSmat` as _trace_mat_smat(A: MatrixBase, B: SparseMatrix,
                                          trans: MatrixTransposeType = default) -> float:
      """If trans==kNoTrans compute Trace(A*B). If trans==kTrans compute Trace(A^T*B)

      Args:
          A(Matrix): A matrix
          B(SparseMatrix): A sparse matrix
          trans(MatrixTransposeType): Determines if we use A as is or its transpose

      Raises:
          Error in case of dimensionality mismatch
      """

    enum GeneralMatrixType with:
      `kFullMatrix` as FULL_MATRIX
      `kCompressedMatrix` as COMPRESSED_MATRIX
      `kSparseMatrix` as SPARSE_MATRIX

    class GeneralMatrix:
      """Defines a class for general matrices. A general matrix can be either
         full(kFullMatrix), compresssed(kCompressedMatrix), or sparse(kSparseMatrix).
      """

      def `Type` as type(self) -> GeneralMatrixType:
        """Returns the type of the matrix: kSparseMatrix, kCompressedMatrix
           or kFullMatrix. If this matrix is empty, returns kFullMatrix.
        """

      def `Compress` as compress(self):
        """Compresses the matrix to a sparse one."""

      def `Uncompress` as uncompress(self):
        """Uncompresses the matrix to a one of class Matrix."""

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes to C++ stream.

        Args:
            os(ostream): The output straem.
            binary(bool): If the stream is binary.
        """

      def `Read` as read(self, is: istream, binary: bool):
        """Reads from C++ stream.

        Args:
            is(istream): The input straem.
            binary(bool): If the stream is binary.
            add(bool): True if you want to add the stream to self.
        """

      def `GetSparseMatrix` as get_sparse_matrix(self) -> SparseMatrix:
        """Returns the contents as a SparseMatrix.

        Raises:
            Error if type returns something other than kSparseMatrix,
            or NumRows() != 0
        """

      def `SwapSparseMatrix` as swap_sparse_matrix(self, smat: SparseMatrix):
        """Swaps the contents of self and smat.

        Raises:
            Error if type returns something other than kSparseMatrix,
            or NumRows() != 0
        """

      def `GetCompressedMatrix` as get_compressed_matrix(self) -> CompressedMatrix:
        """Returns the contents as a compressed matrix.

        Raises:
            Error if type returns something other than kCompressedMatrix,
            or NumRows() != 0
        """

      def `SwapCompressedMatrix` as swap_compressed_matrix(self, cmat: CompressedMatrix):
        """Swaps the current compressed matrix with another(cmat)."""

      def `GetFullMatrix` as get_full_matrix(self) -> Matrix:
        """Returns the contents as an instance of class Matrix.

           Raises:
               Error if the type is anything other than kFullMatrix
               or NumRows() != 0
        """
        return _matrix_wrapper(...)

      def `GetMatrix` as get_matrix(self) -> Matrix:
        """Outputs the contents as an instance of class Matrix."""
        return _matrix_wrapper(...)

      def `SwapFullMatrix` as swap_full_matrix(self, cmat: Matrix):
        """Swap the contents of self with cmat.

        Raises:
            Error if type is anything other than kFullMatrix,
            or if NumRows() != 0
        """

      def `CopyToMat` as copy_to_mat(self, mat: MatrixBase,
                                     trans: MatrixTransposeType = default)

      def `CopyToMat` as copy_to_cu_mat(self, cu_mat: CuMatrixBase,
                                        trans: MatrixTransposeType = default)

      def `AddToMat` as add_to_mat(self, alpha: float, mat: MatrixBase,
                                   trans: MatrixTransposeType = default):
        """Performs mat=mat+alpha*self if MatrixTransposeType==kNoTrans.
           Performs mat^T=mat^T+alpha*self if MatrixTransposeType==kNoTrans.

        Args:
            alpha(float): A constant
            mat(MatrixBase): A matrix
            trans(MatrixTransposeType): Determines transposition of mat.
                                        Default is kNoTrans

        Raises:
            Error in case of dimension mismatch
        """

      # def `AddToMat` as add_to_cu_mat(self, alpha: float, cu_mat: CuMatrixBase,
      #                                 trans: MatrixTransposeType = default)

      def `Scale` as scale(self, alpha: float):
        """Scale all elements of the matrix by alpha."""

      def `NumRows` as num_rows(self) -> int:
        """Return the number of rows."""

      def `NumCols` as num_cols(self) -> int:
        """Return the number of columns."""

      @add__init__
      def `GeneralMatrix` as from_matrix(self, other: MatrixBase):
        """Initialization of a General Matrix from matrix of class MatrixBase."""

      @add__init__
      def `GeneralMatrix` as from_compressed(self, other: CompressedMatrix):
        """Initialization of a General Matrix from matrix of class CompressesMatrix."""

      @add__init__
      def `GeneralMatrix` as from_sparse(self, other: SparseMatrix):
        """Initialization of a General Matrix from matrix of class SparseMatrix."""

      @add__init__
      def `GeneralMatrix` as from_other(self, other: GeneralMatrix):
        """Initialization of a General Matrix from matrix of class GeneralMatrix."""

      def `Clear` as clear(self):
        """Clear the contents of self."""

      def `Swap` as swap(self, other: GeneralMatrix):
        """Swaps the contents of self and other. Shallow swap."""

    # def AppendGeneralMatrixRows(src: list<GeneralMatrix>) -> GeneralMatrix

    def `FilterSparseMatrixRows` as _filter_sparse_matrix_rows(in: SparseMatrix, keep_rows: list<bool>)
        -> SparseMatrix:
      """Outputs a sparse matrix containing only the rows r
         of ``in'' such that keep_rows[r] == true.

      Args:
          in(SparseMatrix): The sparse matrix to be filtered
          keep_rows(list<bool>): A list that determines which rows will be filtered

      Returns:
          The filtered sparse matrix

      Raises:
          Error if in.num_rows != list.length
      """

    def `FilterMatrixRows` as _filter_matrix_rows(in: Matrix, keep_rows: list<bool>) -> Matrix:
      """Outputs a matrix containing only the rows r
         of ``in'' such that keep_rows[r] == true.

      Args:
          in(Matrix): The matrix to be filtered
          keep_rows(list<bool>): A list that determines which rows will be filtered

      Returns:
          The filtered matrix

      Raises:
          Error if in.num_rows != list.length
      """
      return _matrix_wrapper(...)


    def `FilterCompressedMatrixRows` as _filter_compressed_matrix_rows(in: CompressedMatrix, keep_rows: list<bool>)
        -> Matrix:
      """Outputs a matrix containing only the rows r
         of ``in'' such that keep_rows[r] == true.

      Args:
          in(CompressedMatrix): The compressed matrix to be filtered
          keep_rows(list<bool>): A list that determines which rows will be filtered

      Returns:
          The filtered matrix

      Raises:
          Error if in.num_rows != list.length
      """
      return _matrix_wrapper(...)

    def `FilterGeneralMatrixRows` as _filter_general_matrix_rows(
        in: GeneralMatrix, keep_rows: list<bool>) -> GeneralMatrix:
      """Outputs a general matrix containing only the rows r
         of ``in'' such that keep_rows[r] == true.

      Args:
          in(GeneralMatrix): The general matrix to be filtered
          keep_rows(list<bool>): A list that determines which rows will be filtered

      Returns:
          The filtered general matrix

      Raises:
          Error if in.num_rows != list.length
      """

    def `ExtractRowRangeWithPadding` as extract_row_range_with_padding(
        matrix: GeneralMatrix, row_offset: int, num_rows: int) -> GeneralMatrix:
      """Extracts a row-range from a general matrix.

         This function extracts a row-range from a general matrix and writes
         a GeneralMatrix containing the same type of underlying matrix.
         If the row-range is partly outside the row-range of 'in'
         (i.e. if row_offset < 0 or row_offset + num_rows > in.NumRows())
         then it will pad with copies of the first and last row as needed.
         This is more efficient than un-compressing and re-compressing
         the underlying CompressedMatrix, and causes less accuracy loss
         due to re-compression (no loss in most cases).

      Args:
          matrix (GeneralMatrix): The general matrix.
          row_offset (int): The start row index.
          num_rows (int): The number of rows.

      Returns:
          A general matrix.
      """

    # Double precision

    class `SparseVector<double>` as DoubleSparseVector:
      """Defines a class for sparse vectors."""

      def `Dim` as __len__(self) -> int:
        """Returns the dimension of the vector."""

      dim: int = property(`Dim`)
      """Dimension (zero for empty vector)."""

      def `Sum` as sum(self) -> float:
        """Returns the summation of the elements."""

      def `CopyElementsToVec` as copy_elements_to_vec(self, vec: DoubleVectorBase):
        """Copy the elements of self to vec.

        Args:
            vec(DoubleVector): A vector

        Raises:
            Error in case of dimension mismatch
        """

      def `AddToVec` as add_to_vec(self, alpha: float, vec: DoubleVectorBase):
        """Performs vec=vec+alpha*self

        Args:
            alpha(float): A scaling constant
            vec(DoubleVector): A vector
        """

      def `CopyFromSvec` as copy_from_svec(self, other: DoubleSparseVector):
        """Copy elements of other to self

        Args:
            other(DoubleSparseVector): A sparse vector whose elements we will copy

        Raises:
            Error in case of dimension mismatch
        """

      @add__init__
      def `SparseVector` as from_other(self, other: DoubleSparseVector):
        """Initialization by copying the elements of other."""

      def `Swap` as swap_(self, other: DoubleSparseVector) -> self:
        """Swaps the contents of self and other. Shallow swap.

        Args:
            other(DoubleVector): The vector whose elements we want to swap with self.
        """

      def `Max` as max(self) -> (value: float, index: int):
        """Returns a tuple holding the maximum value(float) of the vector and its index(int)."""

      def `NumElements` as num_elements(self) -> int:
        """Returns the number of nonzero elements."""

      def `GetElement` as get_elements(self, i: int) -> tuple<int, float>:
        """Get an indexed element.

        Returns:
            A tuple holding the index and a float
        """

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self:
        """Sets elements to zero with probability zero_prob, else normally distributed."""

      @add__init__
      def `SparseVector` as from_dim(self, dim: int):
        """Initialization by defining the size of the vector.

        Args:
            dim(int): The size of the vector
        """

      @add__init__
      def `SparseVector` as from_pairs(self, dim: int,
                                           pairs: list<tuple<int, float>>):
        """Initialization using a list of tuples(pairs).

        Args:
            dim(int): The size of the vector
            pairs(list<tuple<int,float>>): A list of tuples. Each tuple holds an index
                                           in the vector and its corresponding value
        """

      def `Resize` as resize_(self, dim: int, resize_type: MatrixResizeType = default) -> self:
        """Set vector size to length (length can be zero).
          The default resize type is kSetZero, in which case the new data will
          be zero. If the resize type is kUndefined, the new data will be undefined.
          Finally if the resize type is kCopyData, the new data will be the same as
          the old data in any shared positions, and zero elsewhere.

       Args:
           dim(int): The new size of the vector
           resize_type(MatrixResizeType): Determines the initial values of the vector.
       """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes to C++ stream.

        Args:
            os(ostream): The output straem.
            binary(bool): If the stream is binary.
        """

      def `Read` as read_(self, is: istream, binary: bool) -> self:
        """Reads from C++ stream.

        Args:
            is(istream): The input straem.
            binary(bool): If the stream is binary.
        """

      def `Scale` as scale(self, alpha: float):
        """Scale the elements of the vector by alpha"""

    def `VecSvec` as _vec_svec_double(vec: DoubleVectorBase, svec: DoubleSparseVector) -> float:
        """Returns the inner product of vec and svec."""


    class `SparseMatrix<double>` as DoubleSparseMatrix:
      """This class defines a Sparse Matrix."""

      def `NumRows` as __len__(self) -> int:
        """Returns the number of rows of the matrix."""

      num_rows: int = property(`NumRows`)
      """Number of rows (zero for empty matrix)."""

      num_cols: int = property(`NumCols`)
      """Number of columns (zero for empty matrix)."""

      def `NumElements` as num_elements(self) -> int:
        """Returns the number of nonzero elements."""

      def `Sum` as sum(self) -> float:
        """Returns the sum of the elememts."""

      def `FrobeniusNorm` as frobenius_norm(self) -> float:
        """Computes and returns the Frobenius norm."""

      def `CopyToMat` as copy_to_mat(self, other: DoubleMatrixBase, t: MatrixTransposeType = default)

      def `CopyElementsToVec` as copy_elements_to_vec(self, other: DoubleVectorBase):
        """Copies the nonzero elements of the matrix to the vector other.

        Args:
            other(DoubleVector): A vector to store the nonzero elements of self

        Raises:
            Error if the size of other is different than the number of nonzero
            elements of self
        """

      def `CopyFromSmat` as copy_from_smat_(self, other: DoubleSparseMatrix) -> self:
        """Copy data from another sparse matrix. Will resize if necessary.

        Args:
            other(DoubleSparseMatrix): The matrix to copy from.
        """

      def `AddToMat` as add_to_mat(self, alpha: float, other: DoubleMatrixBase,
                                   t: MatrixTransposeType = default):
        """Performs other = other+alpha*self if t==kNoTrans
        or other^T = other^T+alpha*self if t==kTrans

        Args:
            alpha(float): A constant
            other(DoubleMatrix): A matrix
            t(MatrixTransposeType): transpose or not

        Raises:
            Error in case of dimension mismatch
        """

      @add__init__
      def `SparseMatrix` as from_other(self, other: DoubleSparseMatrix):
        """Initialization by copying the elements of another sparse matrix.

        Args:
            other(DoubleSparseMatrix): A sparse matrix
        """

      def `Swap` as swap_(self, other: DoubleSparseMatrix) ->  self:
        """Swaps the contents of self and other. Shallow swap."""

      @add__init__
      def `SparseMatrix` as from_pairs(
          self, dim: int, pairs: list<list<tuple<int, float>>>):
        """Initialization by a list of list of tuples. The tuples hold
           and index for the matrix and the corresponding value.

        Args:
            dim(int): Determines the number of columns
            pairs(list<list<tuple<int,float>>>): Contains the element of the matrix.
                                                 The length of the ``outer'' list determines
                                                 the number of rows
       """

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self:
        """Sets up to a pseudo-randomly initialized matrix,
           with each element zero with probability zero_prob
           and else normally distributed.
        """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes to C++ stream.

        Args:
            os(ostream): The output straem.
            binary(bool): If the stream is binary.
        """

      def `Read` as read_(self, is: istream, binary: bool) -> self:
        """Reads from C++ stream.

        Args:
            is(istream): The input straem.
            binary(bool): If the stream is binary.
        """

      def `Row` as row(self, r: int) -> DoubleSparseVector:
        """Returns the row indexed by r as a sparse vector"""

      def `SetRow` as set_row_(self, r: int, vec: DoubleSparseVector) -> self:
        """Sets row r to "vec"; makes sure it has the correct dimension."""

      # def AppendSparseMatrixRows(self, inputs: list<SparseMatrix>)

      @add__init__
      def `SparseMatrix` as from_dims(self, num_rows: int, num_cols: int):
        """Initialization by defining the dimensions.

        Args:
            num_rows(int): The number of rows
            num_cols(int): The number of columns
        """

      def `Resize` as resize_(self, rows: int, cols: int,
                 resize_type: MatrixResizeType = default) -> self:
        """Resizes a matrix. If the resize_type is kSetZero,
           the new data will be zero. If the resize type is kUndefined,
           the new data will be undefined. Finally if the resize type is kCopyData,
           the new data will be the same as the old data in any shared positions,
           and zero elsewhere. stride_type defines how data will be read from memory,
           we advise to let it in its default value.

        Args:
            rows(int): The new number of rows
            cols(int): The new number of columns
            resize_type(MatrixResizeType): Determines the initial values of the vector.
        """

      def `Scale` as scale_(self, alpha: float) -> self:
        """Scale the elements of the matrix by alpha."""


    def `TraceMatSmat` as _trace_double_mat_smat(A: DoubleMatrixBase, B: DoubleSparseMatrix,
                                                 trans: MatrixTransposeType = default) -> float:
      """If trans==kNoTrans compute Trace(A*B). If trans==kTrans compute Trace(A^T*B)

      Args:
          A(DoubleMatrix): A matrix
          B(DoubleSparseMatrix): A sparse matrix
          trans(MatrixTransposeType): Determines if we use A as is or its transpose

      Raises:
          Error in case of dimensionality mismatch
      """

    def `FilterSparseMatrixRows` as _filter_double_sparse_matrix_rows(in: DoubleSparseMatrix, keep_rows: list<bool>)
        -> DoubleSparseMatrix:
      """Outputs a sparse matrix containing only the rows r
         of ``in'' such that keep_rows[r] == true.

      Args:
          in(DoubleSparseMatrix): The sparse matrix to be filtered
          keep_rows(list<bool>): A list that determines which rows will be filtered

      Returns:
          The filtered sparse matrix

      Raises:
          Error if in.num_rows != list.length
      """

    def `FilterMatrixRows` as _filter_double_matrix_rows(in: DoubleMatrix, keep_rows: list<bool>) -> DoubleMatrix:
      """Outputs a matrix containing only the rows r
         of ``in'' such that keep_rows[r] == true.

      Args:
          in(DoubleMatrix): The matrix to be filtered
          keep_rows(list<bool>): A list that determines which rows will be filtered

      Returns:
          The filtered matrix

      Raises:
          Error if in.num_rows != list.length
      """
      return _matrix_wrapper(...)
