from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *

from "matrix/kaldi-vector.h":
  namespace `kaldi`:
    class `VectorBase<float>` as VectorBase:
      """Base class for single precision vectors."""

      def `SetZero` as set_zero_(self) -> self:
        """Sets the elements to zero."""

      def `IsZero` as is_zero(self, cutoff: float = default) -> bool:
        """Checks if the elements are all zeros.

        Args:
          cutoff (float): The cutoff value. Defaults to ``1.0e-06``.

        Returns:
          True if `max(abs(self)) <= cutoff`.
        """

      def `Set` as set_(self, f: float) -> self:
        """Sets the elements to the given value.

        Args:
          f (float): The value to set.
        """

      def `SetRandn` as set_randn_(self) -> self:
        """Sets the elements to numbers from standard normal distribution."""

      def `SetRandUniform` as set_rand_uniform_(self) -> self:
        """Sets the elements to numbers uniformly distributed on (0,1)."""

      def `RandCategorical` as rand_categorical(self) -> int:
        """Chooses a random index into the vector.

        Chooses an index with probability proportional to its element value.
        Requires `min(self) >= 0` and `sum(self) > 0`.

        Returns:
          A random index value.

        Raises:
          RuntimeError: If `min(self) < 0 || sum(self) <= 0`.
        """

      def `Dim` as __len__(self) -> int:
        """Returns the dimension of the vector."""

      dim: int = property(`Dim`)
      """Dimension (zero for empty vector)."""

      def `SizeInBytes` as size_in_bytes(self) -> int:
        """Returns the size (in bytes) of the data held by the vector."""

      # NOTE:
      # Data method is implemented in Python.

      def `operator()` as _getitem(self, index: int) -> float:
        """Gets the element at the given index.

        Args:
          index (int): The element index.

        Returns:
          The element at the given index.
        """

      def `Set` as _setitem_(self, index: int, value: float):
        """Sets the element at the given index.

        Args:
          index (int): The element index.
          value (float): The value to set.
        """

      # NOTE:
      # Range method is implemented in Python.

      def `CopyFromVec` as _copy_from_vec_(self, v: VectorBase) -> self:
        """Copies the elements from another vector.

        Args:
          v (Vector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      # NOTE:
      # CopyFromPacked is wrapped via a shim defined in kaldi-matrix-ext.h.

      def `ApplyLog` as apply_log_(self) -> self:
        """Applies the natural log operation to each element."""

      def `ApplyLogAndCopy` as apply_log_and_copy_(self, v: VectorBase) -> self:
        """Applies the natural log operation to the given vector and copies it.

        Args:
          v (Vector): The input vector.
        """

      def `ApplyExp` as apply_exp_(self) -> self:
        """Applies the exponential operation to each element."""

      def `ApplyAbs` as apply_abs_(self) -> self:
        """Applies the absolute value operation to each element."""

      def `ApplyFloor` as apply_floor_(self, floor: float) -> int:
        """Applies the floor operation to each element.

        Performs the operation `y[i] = max(y[i], floor)`.

        Args:
          floor (float): The floor value.

        Returns:
          The number of elements changed.
        """

      def `ApplyFloor` as apply_floor_no_count_(self, floor: float):
        """Applies the floor operation to each element.

        Performs the operation `y[i] = max(y[i], floor)`.

        Args:
          floor (float): The floor value.
        """

      def `ApplyCeiling` as apply_ceiling_(self, ceiling: float) -> int:
        """Applies the ceiling operation to each element.

        Performs the operation `y[i] = min(y[i], ceiling)`.

        Args:
          ceiling (float): The ceiling value.

        Returns:
          The number of elements changed.
        """

      def `ApplyCeiling` as apply_ceiling_no_count_(self, ceiling: float):
        """Applies the ceiling operation to each element.

        Performs the operation `y[i] = min(y[i], ceiling)`.

        Args:
          ceiling (float): The ceiling value.
        """

      def `ApplyFloor` as apply_floor_vector_(self, floor: VectorBase) -> int:
        """Applies a separate floor operation to each element.

        Performs the operation `y[i] = max(y[i], floor[i])`.

        Args:
          floor (Vector): The floor vector.

        Returns:
          The number of elements changed.
        """

      def `ApplySoftMax` as apply_softmax_(self) -> float:
        """Applies the softmax operation to each element.

        Performs the operation
        :math:`y_i = \\frac{\\exp(y_i)}{\\sum_j \\exp(y_j)}`.

        Returns:
          :math:`\\log(\\sum_j \\exp(y_j))`.
        """

      def `ApplyLogSoftMax` as apply_log_softmax_(self) -> float:
        """Applies the logsoftmax operation to each element.

        Performs the operation
        :math:`y_i = y_i - \\log(\\sum_j \\exp(y_j))`.

        Returns:
          :math:`\\log(\\sum_j \\exp(y_j))`.
        """

      def `Tanh` as tanh_(self, src: VectorBase) -> self:
        """Sets the elements to the tanh of the elements in another vector.

        Args:
          src(Vector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `Sigmoid` as sigmoid_(self, src: VectorBase) -> self:
        """Sets the elements to the sigmoid of the elements in another vector.

        Args:
          src(Vector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `ApplyPow` as apply_pow_(self, power: float) -> self:
        """Takes each element to the given power.

        Args:
          power (float): The exponent value.

        Raises:
          RuntimeError: If an element cannot be raised to the given power.
        """

      def `ApplyPowAbs` as apply_pow_abs_(self, power: float,
                                          include_sign: bool = default) -> self:
        """Takes the absolute value of each element raised to the given power.

        If the power is negative and the input is zero, the output is zero.

        Args:
          power (float): The power value.
          include_sign (bool): Whether to include the sign of the input value.
            Defaults to ``False``.

        Raises:
          RuntimeError: If an element cannot be raised to the given power.
        """

      def `Norm` as norm(self, p: float) -> float:
        """Computes the p-norm of the vector.

        Args:
          p (float): The p value. It must be non-negative.

        Returns:
          The p-norm.

        Raises:
          RuntimeError: If `p < 0` or p-norm cannot be computed.
        """

      def `ApproxEqual` as _approx_equal(self, other: VectorBase,
                                         tol: float = default) -> bool:
        """Checks if vectors are approximately equal.

        Args:
          other (Vector): The vector to check against.
          tol (float): The tolerance. Defaults to ``0.01``.

        Returns:
          True if `||self-other|| <= tol * ||self||`. False otherwise.

        Raises:
          RuntimeError: In case of size mismatch or if `tol < 0`.
        """

      def `InvertElements` as invert_elements_(self) -> self:
        """Inverts the elements.

        Raises:
          RuntimeError: If any of the elements is zero.
        """

      def `AddVec` as _add_vec_(self, alpha: float, v: VectorBase) -> self:
        """Adds another vector.

        Performs the operation :math:`y = y + \\alpha\\ v`.

        Args:
          alpha (float): The scalar multiplier.
          v (Vector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `AddVec2` as _add_vec2_(self, alpha: float, v: VectorBase) -> self:
        """Adds the squares of elements from another vector.

        Performs the operation :math:`y = y + \\alpha\\ v\\odot v`.

        Args:
          alpha (float): The scalar multiplier.
          v (Vector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddMatVec(self, alpha: `float` as float, M: MatrixBase,
      #               trans: MatrixTransposeType, v: VectorBase,
      #               beta: `float` as float)
      #
      # def AddMatSvec(self, alpha: `float` as float, M: MatrixBase,
      #                trans: MatrixTransposeType, v: VectorBase,
      #                beta: `float` as float)
      #
      # def AddSpVec(self, alpha: `float` as float, M: SpMatrix,
      #              v: VectorBase, beta: `float` as float)
      #
      # def AddTpVec(self, alpha: `float` as float, M: TpMatrix,
      #              trans: MatrixTransposeType, v: VectorBase,
      #              beta: `float` as float)

      def `ReplaceValue` as replace_value_(self, orig: float,
                                           changed: float) -> self:
        """Replaces the elements.

        Performs the operation `y[y == orig] = changed`.

        Args:
          orig (float): The original value to replace.
          changed (float): The value to replace with.
        """

      def `MulElements` as _mul_elements_(self, v: VectorBase) -> self:
        """Multiplies element-wise with another vector.

        Performs the operation `y = y \\odot v`.

        Args:
          v (Vector): The multiplier.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `DivElements` as _div_elements_(self, v: VectorBase) -> self:
        """Divides element-wise with another vector.

        Performs the operation `y = y \\oslash v`.

        Args:
          v (Vector): The denominator.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `Add` as add_(self, value: float) -> self:
        """Adds the given value to each element.

        Args:
          value (float): The value to add.
        """

      def `AddVecVec` as add_vec_vec_(self, alpha: float, v: VectorBase,
                                      r: VectorBase, beta: float) -> self:
        """Computes an element-wise vector-vector product.

        Performs the operation :math:`y = \\alpha\\ v\\odot r + \\beta\\ y`.

        Args:
          alpha (float): The scalar multiplier for the product.
          v (Vector): The first input vector.
          r (Vector): The second input vector.
          beta (float): The scalar multiplier for the destination vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `AddVecDivVec` as add_vec_div_vec_(self, alpha: float, v: VectorBase,
                                             r: VectorBase, beta: float) -> self:
        """Computes an element-wise vector-vector division.

        Performs the operation :math:`y = \\alpha\\ v\\oslash r + \\beta\\ y`.

        Args:
          alpha (float): The scalar multiplier for the division.
          v (Vector): The first input vector.
          r (Vector): The second input vector.
          beta (float): The scalar multiplier for the destination vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `Scale` as scale_(self, alpha: float) -> self:
        """Scales the vector.

        Args:
          alpha (float): The scalar multiplier.
        """

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def MulTp(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def Solve(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def CopyRowsFromMat(self, M: MatrixBase)
      #
      # def CopyColsFromMat(self, M: MatrixBase)
      #
      # def CopyRowFromMat(self, M: MatrixBase, row: int)
      #
      # def CopyColFromMat(self, M: MatrixBase, col: int)
      #
      # def CopyDiagFromMat(self, M: MatrixBase)
      #
      # def CopyDiagFromPacked(self, M: PackedMatrix)
      #
      # def CopyDiagFromSp(self, M: SpMatrix)
      #
      # def CopyDiagFromTp(self, M: TpMatrix)

      def `Max` as max(self) -> float:
        """Returns the maximum value in the vector."""

      def `Max` as max_index(self) -> (value: float, index: int):
        """Returns the maximum value in the vector, and the associated index."""

      def `Min` as min(self) -> float:
        """Returns the minimum value in the vector."""

      def `Min` as min_index(self) -> (value: float, index: int):
        """Returns the minimum value in the vector, and the associated index."""

      def `Sum` as sum(self) -> float:
        """Returns the sum of the elements."""

      def `SumLog` as sum_log(self) -> float:
        """Returns the sum of the logs of the elements.

        Returns NaN if any of the elements is negative.
        """

      def `LogSumExp` as log_sum_exp(self, prune: float = default) -> float:
        """Computes :math:`f(x)=\\log(\\sum_i \\exp(x_i))` without exp overflow.

        If `prune > 0.0`, ignores terms less than `max(x) - prune`.

        Args:
          prune (float): The pruning beam. Defaults to `-1.0`.

        Returns:
          :math:`\\log(\\sum_i \\exp(x_i))`.
        """

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddRowSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddColSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddDiagMat2(self, alpha: `float` as float, M: MatrixBase,
      #                 trans: MatrixTransposeType = default,
      #                 beta: `float` as float = default)
      #
      # def AddDiagMatMat(self, alpha: `float` as float,
      #                   M: MatrixBase, transM: MatrixTransposeType,
      #                   N: MatrixBase, transN: MatrixTransposeType,
      #                   beta: `float` as float = default)

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self:
        """Reads the vector from the given C++ stream.

        Args:
          is (istream): The input C++ stream.
          binary (bool): Whether the stream is binary.
          add (bool): Whether to add existing contents to the read vector.
            Defaults to ``False``.
        """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes the vector to given C++ stream.

        Args:
            os (ostream): The output C++ straem.
            binary (bool): Whether the stream is binary.
        """

    # Note:
    # SubVector is wrapped manually in matrix-ext.cc.

    class `Vector<float>` as Vector(VectorBase):
      """Single precision vector."""

      @add__init__
      def `Vector` as from_size(self, size: int,
                                resize_type: MatrixResizeType = default):
        """Creates a new vector of given size.

        Args:
          size (int): The size of the new vector.
          resize_type (MatrixResizeType): How to initialize the elements.
            If ``MatrixResizeType.SET_ZERO`` or
            ``MatrixResizeType.COPY_DATA``, they are set to zero.
            If ``MatrixResizeType.UNDEFINED``, they are left uninitialized.
            Defaults to ``MatrixResizeType.SET_ZERO``.
        """

      # NOTE:
      # Match fails since this signature matches multiple copy constructors.
      # No need to wrap this one since the copy constructor accepting a
      # VectorBase covers both cases and does the same thing internally.
      # @add__init__
      # def `Vector` as from_vector(self, v: Vector)

      @add__init__
      def `Vector` as from_vector(self, v: VectorBase):
        """Creates a new vector from a given vector.

        Args:
          v (Vector): The input vector.
        """

      def `Swap` as swap_(self, other: Vector) -> self:
        """Swaps the contents of vectors.

        Shallow swap.

        Args:
          other (Vector): The vector to swap contents with.
        """

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self:
        """Reads the vector from the given C++ stream.

        Resizes the vector to match the size of the matrix read from stream.

        Args:
          is (istream): The input C++ stream.
          binary (bool): Whether the stream is binary.
          add (bool): Whether to add existing contents to the read vector.
            Defaults to ``False``.
        """

      def `Resize` as resize_(self, length: int,
                              resize_type: MatrixResizeType = default) -> self:
        """Resizes the vector.

        Args:
          length(int): The new length.
          resize_type (MatrixResizeType): How to initialize the elements.
              If ``MatrixResizeType.SET_ZERO`` they are set to zero.
              If ``MatrixResizeType.COPY_DATA``, existing elements are
              retained, new ones are set to zero.
              If ``MatrixResizeType.UNDEFINED``, they are left uninitialized.
              Defaults to ``MatrixResizeType.SET_ZERO``.
        """

      def `RemoveElement` as _remove_element_(self, index: int):
        """Removes the element at the given index.

        Shifts later elements down, reducing the vector size by one.

        Args:
          index(int): The element index.
        """

    # NOTE:
    # These functions were renamed to avoid name conflicts.

    def `ApproxEqual` as _approx_equal_vector(
        a: VectorBase, b: VectorBase, tol: `float` as float = default) -> bool:
      """Checks if given vectors are approximately equal.

      Args:
        a (Vector): The first vector.
        b (Vector): The second vector.
        tol (float): The tolerance for the equality check. Defaults to ``0.01``.

      Returns:
        True if
        :math:`\\Vert a-b \\Vert \\leq \\mathrm{tol} \\times \\Vert a \\Vert`.

      Raises:
        RuntimeError: In case of size mismatch.
      """

    def `AssertEqual` as _assert_equal_vector(a: VectorBase, b: VectorBase,
                                              tol: float = default):
      """Asserts given vectors are approximately equal.

      Args:
        a (Vector): The first vector.
        b (Vector): The second vector.
        tol (float): The tolerance for the equality check. Defaults to ``0.01``.

      Raises:
        RuntimeError: In case of size mismatch of if
        :math:`\\Vert a-b \\Vert > \\mathrm{tol} \\times \\Vert a \\Vert`.
      """

    def `VecVec` as _vec_vec(v1: VectorBase, v2: VectorBase) -> float:
      """Returns the dot product of vectors.

      Args:
        v1 (Vector): The first vector.
        v2 (Vector): The second vector.

      Returns:
        The dot product of v1 and v2.

      Raises:
        RuntimeError: In case of size mismatch.
      """

    # NOTE:
    # VecMatVec function is wrapped via a shim defined in kaldi-matrix-ext.h.


    class `VectorBase<double>` as DoubleVectorBase:
      """Base class for double precision vectors."""

      def `SetZero` as set_zero_(self) -> self:
        """Sets the elements to zero."""

      def `IsZero` as is_zero(self, cutoff: float = default) -> bool:
        """Checks if the elements are all zeros.

        Args:
          cutoff (float): The cutoff value. Defaults to ``1.0e-06``.

        Returns:
          True if `max(abs(self)) <= cutoff`.
        """

      def `Set` as set_(self, f: float) -> self:
        """Sets the elements to the given value.

        Args:
          f (float): The value to set.
        """

      def `SetRandn` as set_randn_(self) -> self:
        """Sets the elements to numbers from standard normal distribution."""

      def `SetRandUniform` as set_randn_uniform_(self) -> self:
        """Sets the elements to numbers uniformly distributed on (0,1)."""

      def `RandCategorical` as rand_categorical(self) -> int:
        """Chooses a random index into the vector.

        Chooses an index with probability proportional to its element value.
        Requires `min(self) >= 0` and `sum(self) > 0`.

        Returns:
          A random index value.

        Raises:
          RuntimeError: If `min(self) < 0 || sum(self) <= 0`.
        """

      def `Dim` as __len__(self) -> int:
        """Returns the dimension of the vector."""

      dim: int = property(`Dim`)
      """Dimension (zero for empty vector)."""

      def `SizeInBytes` as size_in_bytes(self) -> int:
        """Returns the size (in bytes) of the data held by the vector."""

      # NOTE:
      # Data method is implemented in Python.

      def `operator()` as _getitem(self, index: int) -> float:
        """Gets the element at the given index.

        Args:
          index (int): The element index.

        Returns:
          The element at the given index.
        """

      def `Set` as _setitem_(self, index: int, value: float):
        """Sets the element at the given index.

        Args:
          index (int): The element index.
          value (float): The value to set.
        """

      # NOTE:
      # Range method is implemented in Python.

      def `CopyFromVec` as _copy_from_vec_(self, v: DoubleVectorBase) -> self:
        """Copies the elements from another vector.

        Args:
          v (DoubleVector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      # NOTE:
      # CopyFromPacked is wrapped via a shim defined in kaldi-matrix-ext.h.

      def `ApplyLog` as apply_log_(self) -> self:
        """Applies the natural log operation to each element."""

      def `ApplyLogAndCopy` as apply_log_and_copy_(self, v: DoubleVectorBase) -> self:
        """Applies the natural log operation to the given vector and copies it.

        Args:
          v (DoubleVector): The input vector.
        """

      def `ApplyExp` as apply_exp_(self) -> self:
        """Applies the exponential operation to each element."""

      def `ApplyAbs` as apply_abs_(self) -> self:
        """Applies the absolute value operation to each element."""

      def `ApplyFloor` as apply_floor_(self, floor: float) -> int:
        """Applies the floor operation to each element.

        Performs the operation `y[i] = max(y[i], floor)`.

        Args:
          floor (float): The floor value.

        Returns:
          The number of elements changed.
        """

      def `ApplyCeiling` as apply_ceiling_(self, ceiling: float) -> int:
        """Applies the ceiling operation to each element.

        Performs the operation `y[i] = min(y[i], ceiling)`.

        Args:
          ceiling (float): The ceiling value.

        Returns:
          The number of elements changed.
        """

      def `ApplyFloor` as apply_floor_vector_(self, floor: DoubleVectorBase) -> int:
        """Applies a separate floor operation to each element.

        Performs the operation `y[i] = max(y[i], floor[i])`.

        Args:
          floor (DoubleVector): The floor vector.

        Returns:
          The number of elements changed.
        """

      def `ApplySoftMax` as apply_softmax_(self) -> float:
        """Applies the softmax operation to each element.

        Performs the operation
        :math:`y_i = \\frac{\\exp(y_i)}{\\sum_j \\exp(y_j)}`.

        Returns:
          :math:`\\log(\\sum_j \\exp(y_j))`.
        """

      def `ApplyLogSoftMax` as apply_log_softmax_(self) -> float:
        """Applies the logsoftmax operation to each element.

        Performs the operation
        :math:`y_i = y_i - \\log(\\sum_j \\exp(y_j))`.

        Returns:
          :math:`\\log(\\sum_j \\exp(y_j))`.
        """

      def `Tanh` as tanh_(self, src: DoubleVectorBase) -> self:
        """Sets the elements to the tanh of the elements in another vector.

        Args:
          src(DoubleVector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `Sigmoid` as sigmoid_(self, src: DoubleVectorBase) -> self:
        """Sets the elements to the sigmoid of the elements in another vector.

        Args:
          src(DoubleVector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `ApplyPow` as apply_pow_(self, power: float) -> self:
        """Takes each element to the given power.

        Args:
          power (float): The exponent value.

        Raises:
          RuntimeError: If an element cannot be raised to the given power.
        """

      def `ApplyPowAbs` as apply_pow_abs_(self, power: float,
                                          include_sign: bool = default) -> self:
        """Takes the absolute value of each element raised to the given power.

        If the power is negative and the input is zero, the output is zero.

        Args:
          power (float): The power value.
          include_sign (bool): Whether to include the sign of the input value.
            Defaults to ``False``.

        Raises:
          RuntimeError: If an element cannot be raised to the given power.
        """

      def `Norm` as norm(self, p: float) -> float:
        """Computes the p-norm of the vector.

        Args:
          p (float): The p value. It must be non-negative.

        Returns:
          The p-norm.

        Raises:
          RuntimeError: If `p < 0` or p-norm cannot be computed.
        """

      def `ApproxEqual` as _approx_equal(self, other: DoubleVectorBase,
                                         tol: float = default) -> bool:
        """Checks if vectors are approximately equal.

        Args:
          other (DoubleVector): The vector to check against.
          tol (float): The tolerance. Defaults to ``0.01``.

        Returns:
          True if `||self-other|| <= tol * ||self||`. False otherwise.

        Raises:
          RuntimeError: In case of size mismatch or if `tol < 0`.
        """

      def `InvertElements` as invert_elements_(self) -> self:
        """Inverts the elements.

        Raises:
          RuntimeError: If any of the elements is zero.
        """

      def `AddVec` as _add_vec_(self, alpha: float, v: DoubleVectorBase) -> self:
        """Adds another vector.

        Performs the operation :math:`y = y + \\alpha\\ v`.

        Args:
          alpha (float): The scalar multiplier.
          v (DoubleVector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `AddVec2` as _add_vec2_(self, alpha: float, v: DoubleVectorBase) -> self:
        """Adds the squares of elements from another vector.

        Performs the operation :math:`y = y + \\alpha\\ v\\odot v`.

        Args:
          alpha (float): The scalar multiplier.
          v (DoubleVector): The input vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddMatVec(self, alpha: `float` as float, M: MatrixBase,
      #               trans: MatrixTransposeType, v: VectorBase,
      #               beta: `float` as float)
      #
      # def AddMatSvec(self, alpha: `float` as float, M: MatrixBase,
      #                trans: MatrixTransposeType, v: VectorBase,
      #                beta: `float` as float)
      #
      # def AddSpVec(self, alpha: `float` as float, M: SpMatrix,
      #              v: VectorBase, beta: `float` as float)
      #
      # def AddTpVec(self, alpha: `float` as float, M: TpMatrix,
      #              trans: MatrixTransposeType, v: VectorBase,
      #              beta: `float` as float)

      def `ReplaceValue` as replace_value_(self, orig: float,
                                           changed: float) -> self:
        """Replaces the elements.

        Performs the operation `y[y == orig] = changed`.

        Args:
          orig (float): The original value to replace.
          changed (float): The value to replace with.
        """

      def `MulElements` as _mul_elements_(self, v: DoubleVectorBase) -> self:
        """Multiplies element-wise with another vector.

        Performs the operation `y = y \\odot v`.

        Args:
          v (DoubleVector): The multiplier.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `DivElements` as _div_elements_(self, v: DoubleVectorBase) -> self:
        """Divides element-wise with another vector.

        Performs the operation `y = y \\oslash v`.

        Args:
          v (DoubleVector): The denominator.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `Add` as add_(self, value: float) -> self:
        """Adds the given value to each element.

        Args:
          value (float): The value to add.
        """

      def `AddVecVec` as add_vec_vec_(self, alpha: float, v: DoubleVectorBase,
                                      r: DoubleVectorBase, beta: float) -> self:
        """Computes an element-wise vector-vector product.

        Performs the operation :math:`y = \\alpha\\ v\\odot r + \\beta\\ y`.

        Args:
          alpha (float): The scalar multiplier for the product.
          v (DoubleVector): The first input vector.
          r (DoubleVector): The second input vector.
          beta (float): The scalar multiplier for the destination vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `AddVecDivVec` as add_vec_div_vec_(self, alpha: float, v: DoubleVectorBase,
                                             r: DoubleVectorBase, beta: float) -> self:
        """Computes an element-wise vector-vector division.

        Performs the operation :math:`y = \\alpha\\ v\\oslash r + \\beta\\ y`.

        Args:
          alpha (float): The scalar multiplier for the division.
          v (DoubleVector): The first input vector.
          r (DoubleVector): The second input vector.
          beta (float): The scalar multiplier for the destination vector.

        Raises:
          RuntimeError: In case of size mismatch.
        """

      def `Scale` as scale_(self, alpha: float) -> self:
        """Scales the vector.

        Args:
          alpha (float): The scalar multiplier.
        """

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def MulTp(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def Solve(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def CopyRowsFromMat(self, M: MatrixBase)
      #
      # def CopyColsFromMat(self, M: MatrixBase)
      #
      # def CopyRowFromMat(self, M: MatrixBase, row: int)
      #
      # def CopyColFromMat(self, M: MatrixBase, col: int)
      #
      # def CopyDiagFromMat(self, M: MatrixBase)
      #
      # def CopyDiagFromPacked(self, M: PackedMatrix)
      #
      # def CopyDiagFromSp(self, M: SpMatrix)
      #
      # def CopyDiagFromTp(self, M: TpMatrix)

      def `Max` as max(self) -> float:
        """Returns the maximum value in the vector."""

      def `Max` as max_index(self) -> (value: float, index: int):
        """Returns the maximum value in the vector, and the associated index."""

      def `Min` as min(self) -> float:
        """Returns the minimum value in the vector."""

      def `Min` as min_index(self) -> (value: float, index: int):
        """Returns the minimum value in the vector, and the associated index."""

      def `Sum` as sum(self) -> float:
        """Returns the sum of the elements."""

      def `SumLog` as sum_log(self) -> float:
        """Returns the sum of the logs of the elements.

        Returns NaN if any of the elements is negative.
        """

      def `LogSumExp` as log_sum_exp(self, prune: float = default) -> float:
        """Computes :math:`f(x)=\\log(\\sum_i \\exp(x_i))` without exp overflow.

        If `prune > 0.0`, ignores terms less than `max(x) - prune`.

        Args:
          prune (float): The pruning beam. Defaults to `-1.0`.

        Returns:
          :math:`\\log(\\sum_i \\exp(x_i))`.
        """

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddRowSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddColSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddDiagMat2(self, alpha: `float` as float, M: MatrixBase,
      #                 trans: MatrixTransposeType = default,
      #                 beta: `float` as float = default)
      #
      # def AddDiagMatMat(self, alpha: `float` as float,
      #                   M: MatrixBase, transM: MatrixTransposeType,
      #                   N: MatrixBase, transN: MatrixTransposeType,
      #                   beta: `float` as float = default)

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self:
        """Reads the vector from the given C++ stream.

        Args:
          is (istream): The input C++ stream.
          binary (bool): Whether the stream is binary.
          add (bool): Whether to add existing contents to the read vector.
            Defaults to ``False``.
        """

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes the vector to given C++ stream.

        Args:
            os (ostream): The output C++ straem.
            binary (bool): Whether the stream is binary.
        """

    # Note:
    # DoubleSubVector is wrapped manually in matrix-ext.cc.

    class `Vector<double>` as DoubleVector(DoubleVectorBase):
      """Double precision vector."""

      @add__init__
      def `Vector` as from_size(self, size: int,
                                resize_type: MatrixResizeType = default):
        """Creates a new vector of given size.

        Args:
          size (int): The size of the new vector.
          resize_type (MatrixResizeType): How to initialize the elements.
            If ``MatrixResizeType.SET_ZERO`` or
            ``MatrixResizeType.COPY_DATA``, they are set to zero.
            If ``MatrixResizeType.UNDEFINED``, they are left uninitialized.
            Defaults to ``MatrixResizeType.SET_ZERO``.
        """

      # NOTE:
      # Match fails since this signature matches multiple copy constructors.
      # No need to wrap this one since the copy constructor accepting a
      # DoubleVectorBase covers both cases and does the same thing internally.
      # @add__init__
      # def `Vector` as from_vector(self, v: Vector)

      @add__init__
      def `Vector` as from_vector(self, v: DoubleVectorBase):
        """Creates a new vector from a given vector.

        Args:
          v (DoubleVector): The input vector.
        """

      def `Swap` as swap_(self, other: DoubleVector) -> self:
        """Swaps the contents of vectors.

        Shallow swap.

        Args:
          other (DoubleVector): The vector to swap contents with.
        """

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self:
        """Reads the vector from the given C++ stream.

        Resizes the vector to match the size of the matrix read from stream.

        Args:
          is (istream): The input C++ stream.
          binary (bool): Whether the stream is binary.
          add (bool): Whether to add existing contents to the read vector.
            Defaults to ``False``.
        """

      def `Resize` as resize_(self, length: int,
                              resize_type: MatrixResizeType = default) -> self:
        """Resizes the vector.

        Args:
          length(int): The new length.
          resize_type (MatrixResizeType): How to initialize the elements.
              If ``MatrixResizeType.SET_ZERO`` they are set to zero.
              If ``MatrixResizeType.COPY_DATA``, existing elements are
              retained, new ones are set to zero.
              If ``MatrixResizeType.UNDEFINED``, they are left uninitialized.
              Defaults to ``MatrixResizeType.SET_ZERO``.
        """

      def `RemoveElement` as _remove_element_(self, index: int):
        """Removes the element at the given index.

        Shifts later elements down, reducing the vector size by one.

        Args:
          index(int): The element index.
        """

    # NOTE:
    # These functions were renamed to avoid name conflicts.

    def `ApproxEqual` as _approx_equal_double_vector(
        a: DoubleVectorBase, b: DoubleVectorBase, tol: float = default) -> bool:
      """Checks if given vectors are approximately equal.

      Args:
        a (DoubleVector): The first vector.
        b (DoubleVector): The second vector.
        tol (float): The tolerance for the equality check. Defaults to ``0.01``.

      Returns:
        True if
        :math:`\\Vert a-b \\Vert \\leq \\mathrm{tol} \\times \\Vert a \\Vert`.

      Raises:
        RuntimeError: In case of size mismatch.
      """

    def `AssertEqual` as _assert_equal_double_vector(
        a: DoubleVectorBase, b: DoubleVectorBase, tol: float = default):
      """Asserts given vectors are approximately equal.

      Args:
        a (DoubleVector): The first vector.
        b (DoubleVector): The second vector.
        tol (float): The tolerance for the equality check. Defaults to ``0.01``.

      Raises:
        RuntimeError: In case of size mismatch of if
        :math:`\\Vert a-b \\Vert > \\mathrm{tol} \\times \\Vert a \\Vert`.
      """

    def `VecVec` as _vec_vec_double(v1: DoubleVectorBase,
                                    v2: DoubleVectorBase) -> float:
      """Returns the dot product of vectors.

      Args:
        v1 (DoubleVector): The first vector.
        v2 (DoubleVector): The second vector.

      Returns:
        The dot product of v1 and v2.

      Raises:
        RuntimeError: In case of size mismatch.
      """

    # NOTE:
    # VecMatVec function is wrapped via a shim defined in kaldi-matrix-ext.h.
