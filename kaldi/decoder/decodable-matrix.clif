from "matrix/kaldi-matrix-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *

from kaldi.itf._decodable_itf import DecodableInterface

from "decoder/decodable-matrix.h":
  namespace `kaldi`:
    class DecodableMatrixScaledMapped(DecodableInterface):
      """DecodableMatrixScaledMapped(tm, likes, scale)

      Decodable scaling and returning mapped log-likelihoods from a matrix.

      This decodable maps transition IDs to PDF IDs when queried. Likelihoods
      read from the matrix are scaled with the :attr:`scale` argument provided
      when instantiating the object.

      Args:
        tm (TransitionModel): The transition model for mapping transition IDs
          to PDF IDs.
        likes (Matrix): The matrix of log-likelihoods.
        scale (float): The scalar multiplier.
      """
      def __init__(self, tm: TransitionModel, likes: Matrix, scale: float)

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready for decoding."""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

      def `LogLikelihood` as log_likelihood(self, frame: int, tid: int) -> float:
        """Returns the log-likehood of the transition ID for the given frame."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""


    class DecodableMatrixMapped(DecodableInterface):
      """DecodableMatrixMapped(tm, likes)

      Decodable returning mapped log-likelihoods from a matrix.

      This decodable maps transition IDs to PDF IDs when queried.

      Args:
        tm (TransitionModel): The transition model for mapping transition IDs
          to PDF IDs.
        likes (Matrix): The matrix of log-likelihoods.
        frame_offset (int): Frame offset into the log-likelihoods matrix.
      """
      def __init__(self, tm: TransitionModel, likes: MatrixBase, frame_offset: int = default)

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready for decoding."""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

      def `LogLikelihood` as log_likelihood(self, frame: int, tid: int) -> float:
        """Returns the log-likehood of the transition ID for the given frame."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""


    class DecodableMatrixMappedOffset(DecodableInterface):
      """DecodableMatrixMappedOffset(tm)

      Decodable returning mapped log-likelihoods from a matrix.

      This decodable maps transition IDs to pdf IDs when queried. It supports
      repeatedly writing to the matrix and setting a time-offset representing
      the frame-index of the first row of the matrix. It's intended for use in
      multi-threaded decoding; mutex and semaphores are not included. External
      code will call :meth:`accept_log_likes` each time more log-likelihods are
      available. If you try to access a log-likelihood that's no longer
      available because the frame index is less than the current offset, it is
      an error.

      Args:
        tm (TransitionModel): The transition model for mapping transition IDs
          to PDF IDs.
      """
      def __init__(self, tm:TransitionModel)

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready for decoding."""

      def `FirstAvailableFrame` as first_available_frame(self) -> int:
        """Returns the 0-based index of the first available frame."""

      def `AcceptLoglikes` as accept_log_likes(self, loglikes: Matrix, frames_to_discard: int):
        """Appends given log-likelihoods to existing log-likehoods.

        This method is destructive of the input "loglikes" because it may under
        some circumstances do a shallow copy by swapping data pointers. It
        appends loglikes to any existing likelihoods that have been previously
        supplied. :attr:`frames_to_discard`, if nonzero, will discard that
        number of previously available frames, from the left, advancing
        :meth:`first_available_frame` by :attr:`frames_to_discard` frames.
        Users should only set `frames_to_discard` to nonzero if the decoder
        won't access the loglikes for older frames going forward.
        """

      def `InputIsFinished` as input_is_finished(self):
        """Signals that no more likelihoods will be appended.

        This method should only be called after all likelihoods are appended to
        mark the end.
        """

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

      def `LogLikelihood` as log_likelihood(self, frame: int, tid: int) -> float:
        """Returns the log-likehood of the transition ID for the given frame."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""


    class DecodableMatrixScaled(DecodableInterface):
      """DecodableMatrixScaled(likes, scale)

      Decodable returning log-likelihoods from a matrix.

      Args:
        likes (Matrix): The matrix of log-likelihoods.
        scale (float): The scalar multiplier.
      """
      def __init__(self, likes: Matrix, scale: float)

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready for decoding."""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

      def `LogLikelihood` as log_likelihood(self, frame: int, index: int) -> float:
        """Returns the log-likehood of the index for the given frame."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""
