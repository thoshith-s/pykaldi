from "itf/decodable-itf-clifwrap.h" import *

from kaldi.itf._decodable_itf import DecodableInterface

from "decoder/decodable-sum.h":
  namespace `kaldi`:
    class DecodableSum(DecodableInterface):
      """DecodableSum(d1, w1, d2, w2)

      Decodable for summing scores of other decodable objects.

      Args:
        d1 (DecodableInterface): The first decodable object.
        w1 (float): The weight for the scores obtained from :attr:`d1`.
        d2 (DecodableInterface): The second decodable object.
        w2 (float): The weight for the scores obtained from :attr:`d2`.
      """
      def __init__(self, d1: DecodableInterface, w1: float, d2: DecodableInterface, w2: float)

      @add__init__
      def `DecodableSum` as new(self, decodables: list<tuple<DecodableInterface, float>>):
        """Creates a new decodable from given (decodable, weight) pairs.

        Args:
          decodables (List[Tuple[DecodableInterface,float]]): The list of
            (decodable, weight) pairs.
        """

      def `CheckSizes` as check_sizes(self):
        """Checks the sizes of underlying decodables."""

      def `LogLikelihood` as log_likelihood(self, frame: int, state_index: int) -> float:
        """Returns the log-likehood of the given index for the given frame."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

    class DecodableSumScaled(DecodableSum):
      """DecodableSumScaled(d1, w1, d2, w2, scale)

      Decodable for summing and scaling scores of other decodable objects.

      Args:
        d1 (DecodableInterface): The first decodable object.
        w1 (float): The weight for the scores obtained from :attr:`d1`.
        d2 (DecodableInterface): The second decodable object.
        w2 (float): The weight for the scores obtained from :attr:`d2`.
        scale (float): The scalar multiplier for the sum.
      """
      def __init__(self, d1: DecodableInterface, w1: float, d2: DecodableInterface, w2: float, scale: float)

      @add__init__
      def `DecodableSumScaled` as new(self, decodables: list<tuple<DecodableInterface, float>>, scale: float):
        """Creates a new decodable from given (decodable, weight) pairs.

        Args:
          decodables (List[Tuple[DecodableInterface,float]]): The list of
            (decodable, weight) pairs.
          scale (float): The scalar multiplier for the sum.
        """

      def `LogLikelihood` as log_likelihood(self, frame: int, state_index: int) -> float:
        """Returns the log-likehood of the given index for the given frame."""
