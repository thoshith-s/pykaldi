from "matrix/kaldi-vector-clifwrap.h" import *

from "hmm/posterior.h":
  namespace `kaldi`:

    def `PosteriorEntriesAreDisjoint` as posterior_entries_are_disjoint(
      post_entries1: list<tuple<int, float>>, post_entries2: list<tuple<int, float>>) -> bool:
      """Returns True if the lists have no common first element (transition-id)."""

    def `VectorToPosteriorEntry` as vector_to_posterior_entries(
      log_likes: VectorBase, num_gselect: int, min_post: float)
      -> (log_like: float, post_entries: list<tuple<int, float>>):
      """Converts log-likelihoods to a list of posterior entries.

      Given a vector of log-likelihoods (typically of Gaussians in a GMM
      but could be of pdf-ids), a number gselect >= 1 and a minimum posterior
      0 <= min_post < 1, it gets the posterior for each element of log-likes
      by applying softmax, then prunes the posteriors using "gselect" and
      "min_post" (keeping at least one), and outputs the result into
      "post_entries", sorted from greatest to least posterior.

      Returns:
        The total log-likelihood (the softmax output) and the "post_entries".
      """
