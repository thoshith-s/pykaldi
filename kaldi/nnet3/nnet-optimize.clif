from "itf/options-itf-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *
from "nnet3/nnet-computation-clifwrap.h" import *
from "nnet3/nnet-nnet-clifwrap.h" import *

from "nnet3/nnet-optimize.h":
  namespace `kaldi::nnet3`:
    class NnetOptimizeOptions:
      optimize: bool
      consolidate_model_update: bool
      propagate_in_place: bool
      backprop_in_place: bool
      optimize_row_ops: bool
      extend_matrices: bool
      convert_addition: bool
      remove_assignments: bool
      allow_left_merge: bool
      allow_right_merge: bool
      initialize_undefined: bool
      move_sizing_commands: bool
      allocate_from_other: bool
      min_deriv_time: int
      max_deriv_time: int
      max_deriv_time_relative: int
      snip_row_ops: bool
      split_row_ops: bool
      memory_compression_level: int
      optimize_looped_computation: bool

      def `Register` as register(self, opts: OptionsItf)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def __eq__(self, other: NnetOptimizeOptions) -> bool

    def `MaxOutputTimeInRequest` as max_output_time_in_request(request: ComputationRequest) -> int

    def `Optimize` as optimize(config: NnetOptimizeOptions, nnet: Nnet,
                 max_output_time_in_request: int, computation: NnetComputation)

    class CachingOptimizingCompilerOptions:
      use_shortcut: bool
      cache_capacity: int

      def `Register` as register(self, opt: OptionsItf)

    class CachingOptimizingCompiler:
      def __init__(self, nnet: Nnet,
                   config: CachingOptimizingCompilerOptions = default)

      @add__init__
      def `CachingOptimizingCompiler` as new_with_optimize_opts(
          self, nnet: Nnet, opt_config: NnetOptimizeOptions,
          config: CachingOptimizingCompilerOptions = default)

      def `CompilePtr` as compile(self, request: ComputationRequest) -> NnetComputation

      def `ReadCache` as read_cache(self, is: istream, binary: bool)

      def `WriteCache` as write_cache(self, os: ostream, binary: bool)

      def `GetSimpleNnetContext` as get_simple_nnet_context(self)
        -> (nnet_left_context: int, nnet_right_context: int)

    def `ConvertAdditionToAssignment` as convert_addition_to_assignment(nnet: Nnet, computation: NnetComputation)

    def `VariableMergingOptimization` as variable_merging_optimization(config: NnetOptimizeOptions,
                                    nnet: Nnet, computation: NnetComputation)

    def `RemoveUnnecessaryZeroing` as remove_unnecessary_zeroing(nnet: Nnet, computation: NnetComputation)

    def `MoveSizingCommands` as move_sizing_commands(nnet: Nnet, computation: NnetComputation)

    def `RemoveUnnecessaryAllocation` as remove_unnecessary_allocation(nnet: Nnet, computation: NnetComputation)

    def `ConsolidateIoOperations` as consolidate_io_operations(nnet: Nnet, computation: NnetComputation)
