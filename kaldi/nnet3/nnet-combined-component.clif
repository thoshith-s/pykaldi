from "base/iostream-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-parse-clifwrap.h" import *
from "nnet3/nnet-component-itf-clifwrap.h" import *

from kaldi.nnet3._nnet_component_itf import UpdatableComponent

from "nnet3/nnet-combined-component.h":
  namespace `kaldi::nnet3`:
    # ConvolutionComponent

    class LstmNonlinearityComponent(UpdatableComponent):
      @add__init__
      def `LstmNonlinearityComponent` as from_other(self, other: LstmNonlinearityComponent)

      def `Init` as init(self, cell_dim: int, use_dropout: bool, param_stddev: float,
                         tanh_self_repair_threshold: float,
                         sigmoid_self_repair_threshold: float, self_repair_scale: float)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Info` as info(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                                   in: CuMatrixBase, out: CuMatrixBase) -> Memo

      def `Backprop` as backprop(
          self, debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Memo, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `PerturbParams` as perturb_params(self, stddev: float)

      def `DotProduct` as dot_product(self, other: UpdatableComponent) -> float

      def `NumParameters` as num_parameters(self) -> int

      def `Vectorize` as vectorize(self, params: VectorBase)

      def `UnVectorize` as unvectorize(self, params: VectorBase)

      def `ZeroStats` as zero_stats(self)

      def `FreezeNaturalGradient` as freeze_natural_gradient(self, freeze: bool)

    # MaxPoolingComponent

    class GruNonlinearityComponent(UpdatableComponent):
      @add__init__
      def `GruNonlinearityComponent` as from_other(self, other: GruNonlinearityComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Info` as info(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                                   in: CuMatrixBase, out: CuMatrixBase) -> Memo

      def `Backprop` as backprop(
          self, debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Memo, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `PerturbParams` as perturb_params(self, stddev: float)

      def `DotProduct` as dot_product(self, other: UpdatableComponent) -> float

      def `NumParameters` as num_parameters(self) -> int

      def `Vectorize` as vectorize(self, params: VectorBase)

      def `UnVectorize` as unvectorize(self, params: VectorBase)

      def `ZeroStats` as zero_stats(self)

      def `FreezeNaturalGradient` as freeze_natural_gradient(self, freeze: bool)


    class OutputGruNonlinearityComponent(UpdatableComponent):
      @add__init__
      def `OutputGruNonlinearityComponent` as from_other(self, other: OutputGruNonlinearityComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Info` as info(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                                   in: CuMatrixBase, out: CuMatrixBase) -> Memo

      def `Backprop` as backprop(
          self, debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Memo, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `PerturbParams` as perturb_params(self, stddev: float)

      def `DotProduct` as dot_product(self, other: UpdatableComponent) -> float

      def `NumParameters` as num_parameters(self) -> int

      def `Vectorize` as vectorize(self, params: VectorBase)

      def `UnVectorize` as unvectorize(self, params: VectorBase)

      def `ZeroStats` as zero_stats(self)

      def `FreezeNaturalGradient` as freeze_natural_gradient(self, freeze: bool)
