from "itf/options-itf-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-example-clifwrap.h" import *
from "nnet3/nnet-computation-clifwrap.h" import *
from "nnet3/nnet-nnet-clifwrap.h" import *
# To import kaldi table wrapper, we first need to import wave reader, kaldi
# lattice and RNNLM example.
from "feat/wave-reader-clifwrap.h" import *
from "hmm/posterior-ext-clifwrap.h" import *
from "lat/kaldi-lattice.h" import *
from "nnet3/nnet-chain-example-clifwrap.h" import *
from "rnnlm/rnnlm-example-clifwrap.h" import *
from "util/kaldi-table-clifwrap.h" import *

from "nnet3/nnet-example-utils.h":
  namespace `kaldi::nnet3`:
    def `MergeExamples` as merge_examples(src: list<NnetExample>, compress: bool) -> NnetExample

    def `GetComputationRequest` as get_computation_request(nnet: Nnet, eg: NnetExample,
                              need_model_derivative: bool,
                              store_component_stats: bool)
        -> ComputationRequest

    def `WriteVectorAsChar` as write_vector_as_char(os: ostream, binary: bool, vec: VectorBase)

    def `ReadVectorAsChar` as read_vector_as_char(is: istream, binary: bool) -> Vector

    class ExampleGenerationConfig:
      left_context: int
      right_context: int
      left_context_initial: int
      right_context_final: int
      num_frames_overlap: int
      frame_subsampling_factor: int
      num_frames_str: str
      num_frames: list<int>

      def `ComputeDerived` as compute_derived(self)

      def `Register` as register(self, opts: OptionsItf)

    class ChunkTimeInfo:
      first_frame: int
      num_frames: int
      left_context: int
      right_context: int
      output_weights: list<float>

    class UtteranceSplitter:
      def __init__(self, config: ExampleGenerationConfig)

      def `Config` as config(self) -> ExampleGenerationConfig

      def `GetChunksForUtterance` as get_chunks_for_utterance(self, utterance_length: int)
          -> list<ChunkTimeInfo>

      def `LengthsMatch` as lengths_match(self, utt: str, utterance_length: int,
                       supervision_length: int,
                       length_tolerance: int = default) -> bool

      def `ExitStatus` as exit_status(self) -> int

    class ExampleMergingConfig:
      compress: bool
      measure_output_frames: str
      minibatch_size: str
      discard_partial_minibatches:str

      # def __init__(self, default_minibatch_size: str = default)

      def `Register` as register(self, opts: OptionsItf)

      def `ComputeDerived` as compute_derived(self)

      def `MinibatchSize` as get_minibatch_size(self, size_of_eg: int, num_available_egs: int,
                        input_ended: bool) -> int:
        """This function tells you what minibatch size should be used for this eg.

        Args:
          size_of_eg (int): The size of the eg, as obtained by :meth:`GetNnetExampleSize`
          num_available_egs (int): The number of egs of this size that are currently available
          input_ended (bool): True if the input has ended. False otherwise

        Returns:
          Minibatch Size to use in this situation
        """

    def `GetNnetExampleSize` as get_nnet_example_size(a: NnetExample) -> int

    class ExampleMergingStats:
      def `WroteExample` as wrote_example(self, example_size: int, structure_hash: int,
                       minibatch_size: int)

      def `DiscardedExamples` as discarded_examples(self, example_size: int, structure_hash: int,
                            num_discarded: int)

      def `PrintStats` as print_stats(self)

    class ExampleMerger:
      def __init__(self, config: ExampleMergingConfig,
                   writer: NnetExampleWriter)

      def `AcceptExample` as accept_example(self, a: NnetExample)

      def `Finish` as finish(self)

      def `ExitStatus` as exit_status(self) -> int
