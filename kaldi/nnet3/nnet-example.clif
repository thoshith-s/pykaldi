from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sparse-matrix-clifwrap.h" import *
from "nnet3/nnet-common-clifwrap.h" import *

from "nnet3/nnet-example.h":
  namespace `kaldi::nnet3`:
    class NnetIo:
      name: str
      indexes: list<Index>
      features: GeneralMatrix

      @add__init__
      def `NnetIo` as from_matrix(self, name: str, t_begin: int,
                                  feats: MatrixBase, t_stride: int = default)

      @add__init__
      def `NnetIo` as from_general_matrix(self, name: str, t_begin: int,
                                          feats: GeneralMatrix, t_stride: int = default)

      @add__init__
      def `NnetIo` as from_posterior(self, name: str, dim: int, t_begin: int,
                                     labels: list<list<tuple<int, float>>>,
                                     t_stride: int = default)

      def `Swap` as swap(self, other: NnetIo)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def __eq__(self, other: NnetIo) -> bool

    # NnetIoStructureHasher, NnetIoStructureCompare

    class NnetExample:
      io: list<NnetIo>

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      @add__init__
      def `NnetExample` as from_other(self, other: NnetExample)

      def `Swap` as swap(self, other: NnetExample)

      def `Compress` as compress(self)

      def __eq__(self, other: NnetExample) -> bool

    # NnetExampleStructureHasher, NnetExampleStructureCompare
