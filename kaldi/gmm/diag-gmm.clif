from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "gmm/full-gmm-clifwrap.h" import *
from "tree/clusterable-classes-clifwrap.h" import *

from kaldi.matrix._matrix import _vector_wrapper
from kaldi.matrix._matrix import _matrix_wrapper

from "gmm/diag-gmm.h":
  namespace `kaldi`:
    class DiagGmm:
      @add__init__
      def `DiagGmm` as from_other(self, gmm: DiagGmm):
        """Creates a new DiagGmm from another DiagGmm."""

      @add__init__
      def `DiagGmm` as from_clusterable(self, gc: GaussClusterable,
                                        var_floor: float):
        """Creates a new DiagGmm from a GaussClusterable."""

      # def CopyFromNormal(self, diag_gmm_normal: DiagGmmNormal)

      @add__init__
      def `DiagGmm` as from_nmix_dim(self, nmix: int, dim: int):
        """Creates a new DiagGmm with given number of mixtures and dimension."""

      # FIXME: CLIF is confused
      # @add__init__
      # def `DiagGmm` as from_components(self, gmms: list<tuple<float, DiagGmm>>)

      def `Resize` as resize(self, nmix: int, dim: int):
        """Resizes arrays to this dim. Does not initialize data."""

      def `NumGauss` as num_gauss(self) -> int:
        """Returns the number of mixture components."""

      def `Dim` as dim(self) -> int:
        """Returns the dimensionality of the Gaussian mean vectors."""

      def `CopyFromDiagGmm` as copy_from_diag(self, diaggmm: DiagGmm):
        """Copies from given :class:`DiagGmm`"""

      def `CopyFromFullGmm` as copy_from_full(self, fullgmm: FullGmm):
        """Copies from given :class:`FullGmm`"""

      def `LogLikelihood` as log_likelihood(self, data: VectorBase) -> float:
        """Computes the log-likelihood for a data point

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
        """

      def `LogLikelihoods` as log_likelihoods(self, data: VectorBase) -> Vector:
        """Computes the per-component log-likelihoods for a data point

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
        """
        return _vector_wrapper(...)

      def `LogLikelihoods` as log_likelihoods_matrix(self, data: MatrixBase) -> Matrix:
        """Computes the per-component log-likelihoods for a sequence of data points

        The row index of the input data matrix and the output log-likelihoods
        matrix is the frame index.

        Args:
          data (:class:`kaldi.matrix.Matrix`): sequence of data points
        """
        return _matrix_wrapper(...)

      def `LogLikelihoodsPreselect` as log_likelihoods_preselect(self, data: VectorBase, indices: list<int>) -> Vector:
        """Computes the per-component log-likelihoods of a subset of mixture components.

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
          indices: list of indices
        """
        return _vector_wrapper(...)

      def `GaussianSelection` as gaussian_selection(self, data: VectorBase, num_gselect: int) -> (log_like: float, output: list<int>):
        """Gets gaussian selection information for one frame.

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
          num_gselect (int): number of gaussians to select

        Returns:
          Log-likelihood for the input frame and the best `num_gselect` indices
          (sorted from best to worst likelihood).
        """

      def `GaussianSelection` as gaussian_selection_matrix(self, data: MatrixBase, num_gselect: int) -> (log_like: float, output: list<list<int>>):
        """Gets gaussian selection information for a sequence of frames.

        Args:
          data (:class:`kaldi.matrix.Matrix`): sequence of data points
          num_gselect (int): number of gaussians to select

        Returns:
          Log-likelihood for the input frame and the best `num_gselect` indices
          (sorted from best to worst likelihood) for each data point.
        """

      def `GaussianSelectionPreselect` as gaussian_selection_preselect(self, data: VectorBase, preselect: list<int>, num_gselect: int) -> (log_like: float, output: list<int>):
        """Get gaussian selection information for one frame.

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
          preselect (list): subset of mixture components
          num_gselect (int): number of gaussians to select

        Returns:
          Log-likelihood for the input frame and the best `num_gselect` indices
          that were preselected (sorted from best to worst likelihood).
        """

      def `ComponentPosteriors` as _component_posteriors(self, data: VectorBase, posteriors: Vector) -> float:
        """Computes the posterior probabilities of all Gaussian components given a data point.

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
          posterior (:class:`kaldi.matrix.Vector`): output vector

        Returns:
          Log-likehood of data given GMM.
        """

      def `ComponentLogLikelihood` as component_log_likelihood(self, data: VectorBase, comp_id: int) -> float:
        """Computes the log-likelihood of a data point given a single Gaussian component.

        Args:
          data (:class:`kaldi.matrix.Vector`): data point
          comp_id: component id

        Returns:
          Log-likehood of input data point for a given component
        """

      def `ComputeGconsts` as compute_gconsts(self) -> int:
        """Sets the gconsts.

        Returns:
          Number of gconsts that are invalid e.g. because of zero weights or variances.
        """

      def `Generate` as generate(self, output: VectorBase):
        """Generates a random data point from this distribution.

        Args:
          output (:class:`kaldi.matrix.Vector`): Output vector
        """

      def `Split` as split(self, target_components: int, perturb_factor: float) -> list<int>:
        """Splits components

        Args:
          target_components (int): number of target components
          perturb_factor (float): perturbation factor

        Returns:
          The order in which components were split.
        """

      def `Perturb` as perturb(self, perturb_factor: float):
        """Perturbs components

        Component means are perturbed with a random vector multiplied by the
        pertrubation factor.

        Args:
          perturb_factor (float): perturbation factor
        """

      def `Merge` as merge(self, target_components: int) -> list<int>:
        """Merges components

        Args:
          target_components (int): number of target components

        Returns:
          The order in which components were merged.
        """

      # def MergeKmeans(self, target_components: int,
      #                 cfg: ClusterKMeansOptions = default)

      def `Write` as write(self, os: ostream, binary: bool):
        """Writes gaussian mixture model to output stream."""

      def `Read` as read(self, is: istream, binary: bool):
        """Reads gaussian mixture model from input stream."""

      def `Interpolate` as interpolate(self, rho: float, source: DiagGmm, flags: int = default):
        """Interpolates this model with diagonal GMM

        this <- rho * source + (1 - rho) * this

        Args:
          rho (float): Interpolation weight
          source (DiagGmm): Source model
          flags (int): Interpolation flags
        """

      def `Interpolate` as interpolate_full(self, rho: float, source: FullGmm, flags: int = default):
        """Interpolates this model with full GMM

        this <- rho * source + (1 - rho) * this

        Args:
          rho (float): Interpolation weight
          source (FullGmm): Source model
          flags (int): Interpolation flags
        """

      def gconsts(self) -> Vector:
        """Returns gconsts"""
        return _vector_wrapper(...)

      def weights(self) -> Vector:
        """Returns mixture weights"""
        return _vector_wrapper(...)

      def means_invvars(self) -> Matrix:
        """Returns means times inverse variances"""
        return _matrix_wrapper(...)

      def inv_vars(self) -> Matrix:
        """Returns inverse variances"""
        return _matrix_wrapper(...)

      def valid_gconsts(self) -> bool:
        """Checks if gconsts are valid"""

      def `RemoveComponent`as remove_component(self, gauss: int, renorm_weights: bool):
        """Removes single component from model."""

      def `RemoveComponents` as remove_components(self, gauss: list<int>, renorm_weights: bool):
        """Removes multiple components from model."""

      def `SetWeights` as set_weights(self, w: VectorBase):
        """Sets mixture weights."""

      def `SetMeans` as set_means(self, m: MatrixBase):
        """Sets means."""

      def `SetInvVarsAndMeans` as set_inv_vars_and_means(self, invvars: MatrixBase, means: MatrixBase):
        """Sets inverse variances and means."""

      def `SetInvVars` as set_inv_vars(self, v: MatrixBase):
        """Sets inverse variances."""

      def `GetVars` as get_vars(self) -> Matrix:
        """Returns component variances."""
        return _matrix_wrapper(...)

      def `GetMeans` as get_means(self) -> Matrix:
        """Returns component means."""
        return _matrix_wrapper(...)

      def `SetComponentMean` as set_component_mean(self, gauss: int, in: VectorBase):
        """Sets mean for a single component.

        Internally multiplies with inv-var.
        """

      def `SetComponentInvVar` as set_component_inv_var(self, gauss: int, in: VectorBase):
        """Sets inv-var for a single component."""

      def `SetComponentWeight` as set_component_weight(self, gauss: int, weight: float):
        """Sets mixture weight for a single component."""

      def `GetComponentMean` as get_component_mean(self, gauss: int, out: VectorBase):
        """Gets component mean."""

      def `GetComponentVariance` as get_component_variance(self, gauss: int, out: VectorBase):
        """Gets component variance."""
