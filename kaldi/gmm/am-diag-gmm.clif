from "itf/options-itf-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "gmm/diag-gmm-clifwrap.h" import *

from "gmm/am-diag-gmm.h":
  namespace `kaldi`:
    class AmDiagGmm:

      def `Init` as init(self, proto: DiagGmm, num_pdfs: int)

      def `AddPdf` as add_pdf(self, gmm: DiagGmm)

      def `CopyFromAmDiagGmm` as copy_from_am_diag(self, other: AmDiagGmm)

      def `SplitPdf` as split_pdf(self, idx: int, target_components: int,
                   perturb_factor: float)

      def `SplitByCount` as split_by_count(self, state_occs: Vector, target_components: int,
                       perturb_factor: float, power: float, min_count: float)

      def `MergeByCount` as merge_by_count(self, state_occs: Vector, target_components: int,
                       power: float, min_count: float)

      def `ComputeGconsts` as compute_gconsts(self) -> int

      def `LogLikelihood` as log_likelihood(self, pdf_index: int, data: VectorBase) -> float

      def `Read` as read(self, is: istream, binary: bool) -> self
      def `Write` as write(self, os: ostream, binary: bool) -> self

      def `Dim` as dim(self) -> int

      def `NumPdfs` as num_pdfs(self) -> int

      def `NumGauss` as num_gauss(self) -> int

      def `NumGaussInPdf` as num_gauss_in_pdf(self, pdf_index: int) -> int

      # FIXME: Add a work around wrapper
      # def GetPdf(self, pdf_index: int) -> DiagGmm

      def `GetGaussianMean` as get_gaussian_mean(self, pdf_index: int, gauss: int, out: VectorBase)

      def `GetGaussianVariance` as get_gaussian_variance(self, pdf_index: int, gauss: int,
                              out: VectorBase)

      def `SetGaussianMean` as set_gaussian_mean(self, pdf_index: int, gauss: int, in: VectorBase)

    class UbmClusteringOptions:
      ubm_num_gauss: int
      reduce_state_factor: float
      intermediate_num_gauss: int
      cluster_varfloor: float
      max_am_gauss: int

      def `Register` as register(self, opts: OptionsItf)

      def `Check` as check(self)

    def `ClusterGaussiansToUbm` as cluster_gaussians_to_ubm(am: AmDiagGmm, state_occs: Vector,
                              opts: UbmClusteringOptions, ubm_out: DiagGmm)
