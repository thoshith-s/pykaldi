from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "gmm/diag-gmm-clifwrap.h" import * 

from "gmm/mle-diag-gmm.h":
    namespace `kaldi`:
        class MleDiagGmmOptions:
            variance_floor_vector: DoubleVector 
            min_gaussian_weight: float 
            min_gaussian_occupancy: float 
            min_variance: float 
            remove_low_count_gaussians: bool

            def `Register` as register(self, opts: OptionsItf)

        class MapDiagGmmOptions:
            mean_tau: float
            variance_tau: float 
            weight_tau: float 

            def `Register` as register(self, opts: OptionsItf)

        class AccumDiagGmm:
            @add__init__
            def `AccumDiagGmm` as new(self, gmm: DiagGmm, flags: int)

            @add__init__
            def `AccumDiagGmm` as with_other(self, other: AccumDiagGmm)

            def `Read` as read(self, in_stream: istream, binary: bool, add: bool)

            def `Write` as write(self, out_stream: ostream, binary: bool)

            def `Resize` as resize(self, num_gauss: int, dim: int, flags: int)

            def `Resize` as resize_with_gmm(self, gmm:DiagGmm, flags: int)

            def `NumGauss` as num_gauss(self) -> int 

            def `Dim` as dim(self) -> int 

            def `SetZero` as set_zero(self, flags: int)

            def `Scale` as scale(self, f: float, flags: int)

            def `AccumulateForComponent` as accumulate_for_component(self, data: VectorBase, comp_index: int, weight: float)

            def `AccumulateFromPosteriors` as accumulate_from_posteriors(self, data: VectorBase, gauss_posteriors: VectorBase)

            def `AccumulateFromDiag` as accumulate_from_diag(self, gmm: DiagGmm, data: VectorBase, frame_posterior: float) -> float

            def `AccumulateFromDiagMultiThreaded` as accumulate_from_diag_multi_threaded(self, gmm: DiagGmm, data: MatrixBase, frame_weights: VectorBase, num_threads: int) -> float 

            def `AddStatsForComponent` as add_stats_for_component(self, comp_id: int, occ: float, x_stats: DoubleVectorBase, x2_stats: DoubleVectorBase)

            def `Add` as add(self, scale: float, acc: AccumDiagGmm)

            def `SmoothStats` as smooth_stats(self, tau: float)

            def `SmoothWithAccum` as smooth_with_accum(self, tau: float, src_acc: AccumDiagGmm)

            def `SmoothWithModel` as smooth_with_model(self, tau: float, src_gmm: DiagGmm)

            flags_: int = property(`Flags`)

            # FIXME
            # occupancy_: DoubleVectorBase = property(`occupancy`)
            # mean_accumulator_: DoubleMatrixBase = property(`mean_accumulator`)
            # variance_accumulator_: DoubleMatrixBase = property(`variance_accumulator`)

            def `AssertEqual` as assert_equal(self, other: AccumDiagGmm)

        def `AugmentGmmFlags` as augment_gmm_flags(f: int) -> int 

        # def MleDiagGmmUpdate(self, config: MleDiagGmmOptions, diag_gmm_acc: AccumDiagGmm, flags: int, gmm:DiagGmm) -> (obj_change_out:float, count_out: float, floored_elements_out: int = default, floored_gauss_out: int = default, removed_gauss_out: int = default)

        # def MapDiagGmmUpdate(self, config: MapDiagGmmOptions, diag_gmm_acc: AccumDiagGmm, flags: int, gmm:DiagGmm) -> (obj_change_out: float, count_out: float)

        # def MlObjective(self, gmm: DiagGmm, diag_gmm_acc:AccumDiagGmm) -> float