from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *
from "feat/wave-reader-clifwrap.h" import *
from "hmm/posterior-ext-clifwrap.h" import *
from "nnet3/nnet-example-clifwrap.h" import *
from "nnet3/nnet-chain-example-clifwrap.h" import *
from "rnnlm/rnnlm-example-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "lat/kaldi-lattice.h" import *

from kaldi.matrix._matrix import _vector_wrapper
from kaldi.matrix._matrix import _matrix_wrapper
from kaldi.util import _value_error_on_false
from kaldi.fstext import LatticeVectorFst
from kaldi.fstext import CompactLatticeVectorFst

from "util/kaldi-table.h":
  namespace `kaldi`:
    enum WspecifierType with:
      `kNoWspecifier` as NO_SPECIFIER
      `kArchiveWspecifier` as ARCHIVE_SPECIFIER
      `kScriptWspecifier` as SCRIPT_SPECIFIER
      `kBothWspecifier` as BOTH_SPECIFIER

    class WspecifierOptions:
      """Write specifier options."""
      binary: bool
      """Write table in binary format."""
      flush: bool
      """Flush the stream after writing each entry."""
      permissive: bool
      """Ignore absent script file entries."""

    def `ClassifyWspecifier` as classify_wspecifier(wspecifier: str)
      -> (wspecifier_type: WspecifierType, archive_wxfilename: str,
          script_wxfilename: str, opts: WspecifierOptions):
      """Decomposes the wspecifier string into its components.

      Returns:
        A tuple containing `(wspecifier type, archive filename, script
        filename, wspecifier options)`.
      """

    def `ReadScriptFile` as read_script_file(rxfilename: str,
                                             print_warnings: bool)
      -> (success: bool, script_out: list<tuple<str,str>>):
      """Reads a script file into a list of string pairs.

      The script (.scp) file format is::

        key1 xfilename1
        key2 xfilename2
        ...

      where xfilenames are either rxfilenames or wxfilenames.

      Args:
        rxfilename (str): Extended filename for reading the script file.
        print_warnings (bool): Whether to print out warning messages that
          explain the script file errors.

      Returns:
        A list of `(key, xfilename)` pairs.

      Raises:
        ValueError: If the script file format is not valid.
      """
      return _value_error_on_false(...)

    def `WriteScriptFile` as write_script_file(
      wxfilename: str, script: list<tuple<str,str>>) -> bool:
      """Writes a list of string pairs as a script file.

      Args:
        wxfilename (str): Extended filename for writing the script file.

      Returns:
        True on success, False otherwise.
      """

    class RspecifierOptions:
      """Read specifier options."""
      once: bool
      """Each key in the table will be queried only once."""
      sorted: bool
      """Table keys are in sorted order."""
      called_sorted: bool
      """Table keys/values will be accessed in sorted order. Implies `once`."""
      permissive: bool
      """If a table cannot be read, act as if its keys were never there."""
      background: bool
      """Read ahead to the next object in a background thread."""

    enum RspecifierType with:
      `kNoRspecifier` as NO_SPECIFIER
      `kArchiveRspecifier` as ARCHIVE_SPECIFIER
      `kScriptRspecifier` as SCRIPT_SPECIFIER

    def `ClassifyRspecifier` as classify_rspecifier(rspecifier: str)
      -> (rspecifier_type: RspecifierType, rxfilename: str, opts: RspecifierOptions):
      """Decomposes the rspecifier string into its components.

      Returns:
        A tuple containing `(rspecifier type, extended filename, rspecifier
        options)`.
      """

    # Sequential Readers

    class `SequentialTableReader<KaldiObjectHolder<Vector<float>>>`
        as SequentialVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> Vector:
        return _vector_wrapper(...)

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<KaldiObjectHolder<Vector<double>>>`
        as SequentialDoubleVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> DoubleVector:
        return _vector_wrapper(...)

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<KaldiObjectHolder<Matrix<float>>>`
        as SequentialMatrixReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> Matrix:
        return _matrix_wrapper(...)

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<KaldiObjectHolder<Matrix<double>>>`
        as SequentialDoubleMatrixReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> DoubleMatrix:
        return _matrix_wrapper(...)

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<WaveHolder>` as SequentialWaveReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> WaveData

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<WaveInfoHolder>` as SequentialWaveInfoReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> WaveInfo

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<PosteriorWrapperHolder>` as SequentialPosteriorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> Posterior

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<GaussPostHolder>` as SequentialGaussPostReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<list<tuple<int, Vector>>>

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `SequentialTableReader<LatticeHolder>` as SequentialLatticeReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> LatticeVectorFst:
        return LatticeVectorFst(...)

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<CompactLatticeHolder>`
        as SequentialCompactLatticeReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> CompactLatticeVectorFst:
        return CompactLatticeVectorFst(...)

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<int32>>` as SequentialIntReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> int

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<float>>` as SequentialFloatReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> `float` as float

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<double>>`
        as SequentialDoubleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> float

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicHolder<bool>>` as SequentialBoolReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> bool

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicVectorHolder<int32>>`
        as SequentialIntVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<int>

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicVectorVectorHolder<int32>>`
        as SequentialIntVectorVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<list<int>>

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicPairVectorHolder<int32>>`
        as SequentialIntPairVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<tuple<int, int>>

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `SequentialTableReader<BasicPairVectorHolder<float>>`
        as SequentialFloatPairVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> list<tuple<float, float>>

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    # Random Access Readers

    class `RandomAccessTableReader<KaldiObjectHolder<Vector<float>>>`
        as RandomAccessVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Vector:
        return _vector_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<KaldiObjectHolder<Vector<double>>>`
        as RandomAccessDoubleVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> DoubleVector:
        return _vector_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<KaldiObjectHolder<Matrix<float>>>`
        as RandomAccessMatrixReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Matrix:
        return _matrix_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<KaldiObjectHolder<Matrix<double>>>`
        as RandomAccessDoubleMatrixReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> DoubleMatrix:
        return _matrix_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<WaveHolder>` as RandomAccessWaveReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> WaveData

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<WaveInfoHolder>` as RandomAccessWaveInfoReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> WaveInfo

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<PosteriorWrapperHolder>` as RandomAccessPosteriorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Posterior

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<GaussPostHolder>` as RandomAccessGaussPostReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<list<tuple<int, Vector>>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<LatticeHolder>`
        as RandomAccessLatticeReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> LatticeVectorFst:
        return LatticeVectorFst(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<CompactLatticeHolder>`
        as RandomAccessCompactLatticeReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> CompactLatticeVectorFst:
        return CompactLatticeVectorFst(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicHolder<int32>>`
        as RandomAccessIntReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> int

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicHolder<float>>`
        as RandomAccessFloatReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> `float` as float

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicHolder<double>>`
        as RandomAccessDoubleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> float

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicHolder<bool>>`
        as RandomAccessBoolReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicVectorHolder<int32>>`
        as RandomAccessIntVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<int>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicVectorVectorHolder<int32>>`
        as RandomAccessIntVectorVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<list<int>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicPairVectorHolder<int32>>`
        as RandomAccessIntPairVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<tuple<int, int>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReader<BasicPairVectorHolder<float>>`
        as RandomAccessFloatPairVectorReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> list<tuple<float, float>>

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    # Mapped Random Access Readers

    class `RandomAccessTableReaderMapped<KaldiObjectHolder<Vector<float>>>`
        as RandomAccessVectorReaderMapped:

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Vector:
        return _vector_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReaderMapped<KaldiObjectHolder<Vector<double>>>`
        as RandomAccessDoubleVectorReaderMapped:

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> DoubleVector:
        return _vector_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReaderMapped<KaldiObjectHolder<Matrix<float>>>`
        as RandomAccessMatrixReaderMapped:

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> Matrix:
        return _matrix_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReaderMapped<KaldiObjectHolder<Matrix<double>>>`
        as RandomAccessDoubleMatrixReaderMapped:

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> DoubleMatrix:
        return _matrix_wrapper(...)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `RandomAccessTableReaderMapped<BasicHolder<float>>`
        as RandomAccessFloatReaderMapped:

      def `Open` as open(self, table_rspecifier: str, map_rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> `float` as float

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    # Writers

    class `TableWriter<KaldiObjectHolder<Vector<float>>>` as VectorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: Vector)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `TableWriter<KaldiObjectHolder<Vector<double>>>` as DoubleVectorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: DoubleVector)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `TableWriter<KaldiObjectHolder<Matrix<float>>>` as MatrixWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: Matrix)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `TableWriter<KaldiObjectHolder<Matrix<double>>>` as DoubleMatrixWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: DoubleMatrix)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `TableWriter<KaldiObjectHolder<CompressedMatrix>>`
        as CompressedMatrixWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: CompressedMatrix)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<WaveHolder>` as WaveWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: WaveData)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<PosteriorWrapperHolder>` as PosteriorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: Posterior)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `TableWriter<GaussPostHolder>` as GaussPostWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<list<tuple<int, Vector>>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool


    class `TableWriter<LatticeHolder>` as LatticeWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: LatticeVectorFst)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<CompactLatticeHolder>` as CompactLatticeWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: CompactLatticeVectorFst)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<int32>>` as IntWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: int)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<float>>` as FloatWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: float)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<double>>` as DoubleWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: float)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicHolder<bool>>` as BoolWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: bool)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicVectorHolder<int32>>` as IntVectorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<int>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicVectorVectorHolder<int32>>`
        as IntVectorVectorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<list<int>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicPairVectorHolder<int32>>` as IntPairVectorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<tuple<int, int>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class `TableWriter<BasicPairVectorHolder<float>>` as FloatPairVectorWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: list<tuple<float, float>>)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

  namespace `kaldi::nnet3`:
    class SequentialNnetExampleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> NnetExample

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class SequentialNnetChainExampleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> NnetChainExample

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class RandomAccessNnetExampleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> NnetExample

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class RandomAccessNnetChainExampleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `HasKey` as has_key(self, key: str) -> bool

      def `Value` as value(self, key: str) -> NnetChainExample

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class NnetExampleWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: NnetExample)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class NnetChainExampleWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: NnetChainExample)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

  namespace `kaldi::rnnlm`:
    class SequentialRnnlmExampleReader:

      def `Open` as open(self, rspecifier: str) -> bool

      def `Done` as done(self) -> bool

      def `Key` as key(self) -> str

      def `FreeCurrent` as free_current(self)

      def `Value` as value(self) -> RnnlmExample

      def `Next` as next(self)

      def `IsOpen` as is_open(self) -> bool

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool

    class RnnlmExampleWriter:

      def `Open` as open(self, wspecifier: str) -> bool

      def `IsOpen` as is_open(self) -> bool

      def `Write` as write(self, key: str, value: RnnlmExample)

      def `Flush` as flush(self)

      def `Close` as close(self) -> bool

      @__exit__
      def Close(self) -> bool
