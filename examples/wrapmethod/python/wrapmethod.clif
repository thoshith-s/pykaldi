# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "wrapmethod/wrapmethod.h":
  namespace `clif_example::wrapmethod`:
    class ClassWithMethods:
      # Wrapper for the constructor ClassWithMethods::ClassWithMethods(size_t)
      def __init__(self, s: int)

      # Wrapper for ClassWithMethods::Get
      def Get(self, index: int) -> int

      # Wrapper for ClassWithMethods::Set
      def Set(self, index: int, value: int)

      # Wrapper for ClassWithMethods::Size
      def Size(self) -> int

      # Wrapper for ClassWithMethods::Size as __len__ method in Python
      def `Size` as __len__(self) -> int

      # Wrapper for the constructor ClassWithMethods::ClassWithMethods(int, int)
      @add__init__
      def ConstructWithInitVal(self, s: int, v: int)

      # Wrapper for static method ClassWithMethods::GetStaticNumber
      @classmethod
      def GetStaticNumber(cls) -> int

      # Wrap ClassWithMethods::Get as __getitem__ with sequence protocol
      @sequential
      def `Get` as __getitem__(self, i: int) -> int

      # Wrap ClassWithMethods::Set as __setitem__ with sequence protocol
      @sequential
      def `Set` as __setitem__(self, i: int, v: int)

      # Wrap ClassWithMethods::Set as __delitem__ with sequence protocol
      @sequential
      def `Delete` as __delitem__(self, i: int)

    # Wrap a static method as a function in the module scope.
    staticmethods from `ClassWithMethods`:
      def GetStaticNumber() -> int
